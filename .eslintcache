[{"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\index.js":"1","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\store.js":"4","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\socketService.js":"5","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\App.jsx":"6","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\userActions.js":"7","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\boardAction.js":"8","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardList.jsx":"9","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\userService.js":"10","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\cardService.js":"11","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Dashboard.jsx":"12","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Templates.jsx":"13","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Signup.jsx":"14","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Login.jsx":"15","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\index.js":"16","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Header.jsx":"17","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\boardService.js":"18","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Board.jsx":"19","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\templateService.js":"20","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Home.jsx":"21","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\HomePickModal.jsx":"22","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\TemplatePreview.jsx":"23","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\BoardsPick.jsx":"24","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardPreview.jsx":"25","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\httpService.js":"26","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\utilService.js":"27","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\userReducer.js":"28","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\boardReducer.js":"29","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\reviewReducer.js":"30","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\systemReducer.js":"31","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\cardReducer.js":"32","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\menuReducer.js":"33","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\MyAvatar.jsx":"34","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\UserBoardsModal.jsx":"35","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\UserMenuModal.jsx":"36","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\Menu.jsx":"37","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Loading.jsx":"38","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuMapShow.jsx":"39","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupList.jsx":"40","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\Card.jsx":"41","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardHeader.jsx":"42","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Archive.jsx":"43","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddDueDateModal.jsx":"44","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\DynamicCardActionModal.jsx":"45","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardMenu.jsx":"46","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuActivitiesList.jsx":"47","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionStickers.jsx":"48","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionLabels.jsx":"49","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionSearch.jsx":"50","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionAbout.jsx":"51","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionBackground.jsx":"52","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardCommentPreview.jsx":"53","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\AddMembersModal.jsx":"54","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupPreview.jsx":"55","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardContent.jsx":"56","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\menuAction.js":"57","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuActivity.jsx":"58","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\Backgrounds\\ColorsArea.jsx":"59","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\Backgrounds\\PhotosArea.jsx":"60","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\menuService.js":"61","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\ShareCardModal.jsx":"62","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\menuSearchBy\\UserSearchBy.jsx":"63","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\menuSearchBy\\LabelSearchBy.jsx":"64","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\cardActions.js":"65","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\TimeDisplay.jsx":"66","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MemberList.jsx":"67","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardDescription.jsx":"68","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\LabelList.jsx":"69","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardChecklistList.jsx":"70","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardCommentList.jsx":"71","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\DynamicGroupModal.jsx":"72","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\AddCardInput.jsx":"73","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupMenu.jsx":"74","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardAttachmentList.jsx":"75","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardList.jsx":"76","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardChecklist.jsx":"77","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MemberListModal.jsx":"78","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupModals\\SortGroupModal.jsx":"79","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupModals\\MoveGroupModal.jsx":"80","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardPreview.jsx":"81","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\Todo.jsx":"82","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\LinearProgressBar.jsx":"83","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardEdit.jsx":"84","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardDetails.jsx":"85","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MoveCardModal.jsx":"86","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CopyCardModal.jsx":"87","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddAttachmentModal.jsx":"88","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddCoverModal.jsx":"89","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddChecklistModal.jsx":"90","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\LabelListModal.jsx":"91"},{"size":1019,"mtime":1611326254224,"results":"92","hashOfConfig":"93"},{"size":5064,"mtime":1610460278367,"results":"94","hashOfConfig":"93"},{"size":364,"mtime":1610460278364,"results":"95","hashOfConfig":"93"},{"size":323,"mtime":1610460278387,"results":"96","hashOfConfig":"93"},{"size":1825,"mtime":1611137112910,"results":"97","hashOfConfig":"93"},{"size":1715,"mtime":1611431100142,"results":"98","hashOfConfig":"93"},{"size":892,"mtime":1611326254237,"results":"99","hashOfConfig":"93"},{"size":7711,"mtime":1611431100222,"results":"100","hashOfConfig":"93"},{"size":5076,"mtime":1611479312045,"results":"101","hashOfConfig":"93"},{"size":1447,"mtime":1611326254234,"results":"102","hashOfConfig":"93"},{"size":3133,"mtime":1611361994670,"results":"103","hashOfConfig":"93"},{"size":6782,"mtime":1611326254228,"results":"104","hashOfConfig":"93"},{"size":1591,"mtime":1611412506045,"results":"105","hashOfConfig":"93"},{"size":6436,"mtime":1611326254230,"results":"106","hashOfConfig":"93"},{"size":3874,"mtime":1611326254229,"results":"107","hashOfConfig":"93"},{"size":560,"mtime":1610815597106,"results":"108","hashOfConfig":"93"},{"size":3029,"mtime":1611441387057,"results":"109","hashOfConfig":"93"},{"size":8159,"mtime":1611431100219,"results":"110","hashOfConfig":"93"},{"size":3374,"mtime":1611431100215,"results":"111","hashOfConfig":"93"},{"size":164,"mtime":1611431100244,"results":"112","hashOfConfig":"93"},{"size":461,"mtime":1611431100218,"results":"113","hashOfConfig":"93"},{"size":4192,"mtime":1611420490292,"results":"114","hashOfConfig":"93"},{"size":892,"mtime":1611433157000,"results":"115","hashOfConfig":"93"},{"size":4901,"mtime":1611326254227,"results":"116","hashOfConfig":"93"},{"size":1109,"mtime":1611431100191,"results":"117","hashOfConfig":"93"},{"size":1079,"mtime":1611137112909,"results":"118","hashOfConfig":"93"},{"size":916,"mtime":1611263964449,"results":"119","hashOfConfig":"93"},{"size":755,"mtime":1611329943450,"results":"120","hashOfConfig":"93"},{"size":629,"mtime":1611326254238,"results":"121","hashOfConfig":"93"},{"size":669,"mtime":1610460278383,"results":"122","hashOfConfig":"93"},{"size":322,"mtime":1610460278384,"results":"123","hashOfConfig":"93"},{"size":377,"mtime":1610545229448,"results":"124","hashOfConfig":"93"},{"size":279,"mtime":1610815597107,"results":"125","hashOfConfig":"93"},{"size":635,"mtime":1611431100201,"results":"126","hashOfConfig":"93"},{"size":1740,"mtime":1611441632609,"results":"127","hashOfConfig":"93"},{"size":1994,"mtime":1611431100206,"results":"128","hashOfConfig":"93"},{"size":5364,"mtime":1611349607743,"results":"129","hashOfConfig":"93"},{"size":204,"mtime":1611431100199,"results":"130","hashOfConfig":"93"},{"size":1268,"mtime":1610891480669,"results":"131","hashOfConfig":"93"},{"size":4340,"mtime":1611431100197,"results":"132","hashOfConfig":"93"},{"size":4270,"mtime":1611326254209,"results":"133","hashOfConfig":"93"},{"size":3349,"mtime":1611431100188,"results":"134","hashOfConfig":"93"},{"size":6111,"mtime":1611431100185,"results":"135","hashOfConfig":"93"},{"size":1515,"mtime":1611011755808,"results":"136","hashOfConfig":"93"},{"size":2515,"mtime":1611326254215,"results":"137","hashOfConfig":"93"},{"size":2527,"mtime":1611326254214,"results":"138","hashOfConfig":"93"},{"size":605,"mtime":1610891480666,"results":"139","hashOfConfig":"93"},{"size":2172,"mtime":1610891480678,"results":"140","hashOfConfig":"93"},{"size":6975,"mtime":1611086336599,"results":"141","hashOfConfig":"93"},{"size":1490,"mtime":1611004151896,"results":"142","hashOfConfig":"93"},{"size":3838,"mtime":1611326254223,"results":"143","hashOfConfig":"93"},{"size":2215,"mtime":1611004151894,"results":"144","hashOfConfig":"93"},{"size":596,"mtime":1611359850848,"results":"145","hashOfConfig":"93"},{"size":1121,"mtime":1611431100183,"results":"146","hashOfConfig":"93"},{"size":8319,"mtime":1611442152815,"results":"147","hashOfConfig":"93"},{"size":1302,"mtime":1611137112898,"results":"148","hashOfConfig":"93"},{"size":687,"mtime":1610891480693,"results":"149","hashOfConfig":"93"},{"size":2102,"mtime":1611086336597,"results":"150","hashOfConfig":"93"},{"size":1669,"mtime":1611004151892,"results":"151","hashOfConfig":"93"},{"size":5776,"mtime":1611004151893,"results":"152","hashOfConfig":"93"},{"size":301,"mtime":1610891480688,"results":"153","hashOfConfig":"93"},{"size":761,"mtime":1611431100213,"results":"154","hashOfConfig":"93"},{"size":524,"mtime":1611004151898,"results":"155","hashOfConfig":"93"},{"size":1977,"mtime":1611004151897,"results":"156","hashOfConfig":"93"},{"size":704,"mtime":1610586036756,"results":"157","hashOfConfig":"93"},{"size":1285,"mtime":1611363749172,"results":"158","hashOfConfig":"93"},{"size":1087,"mtime":1611137112903,"results":"159","hashOfConfig":"93"},{"size":2235,"mtime":1611326254212,"results":"160","hashOfConfig":"93"},{"size":1066,"mtime":1611137112901,"results":"161","hashOfConfig":"93"},{"size":1664,"mtime":1611137112896,"results":"162","hashOfConfig":"93"},{"size":2826,"mtime":1610898772679,"results":"163","hashOfConfig":"93"},{"size":1167,"mtime":1611353090109,"results":"164","hashOfConfig":"93"},{"size":1054,"mtime":1611084660181,"results":"165","hashOfConfig":"93"},{"size":1712,"mtime":1611442192310,"results":"166","hashOfConfig":"93"},{"size":1850,"mtime":1611431100211,"results":"167","hashOfConfig":"93"},{"size":2214,"mtime":1611431100194,"results":"168","hashOfConfig":"93"},{"size":2119,"mtime":1611137112895,"results":"169","hashOfConfig":"93"},{"size":2784,"mtime":1611431100212,"results":"170","hashOfConfig":"93"},{"size":1229,"mtime":1611183621271,"results":"171","hashOfConfig":"93"},{"size":2607,"mtime":1611221410022,"results":"172","hashOfConfig":"93"},{"size":4266,"mtime":1611431100196,"results":"173","hashOfConfig":"93"},{"size":3090,"mtime":1611326254220,"results":"174","hashOfConfig":"93"},{"size":577,"mtime":1610815597067,"results":"175","hashOfConfig":"93"},{"size":7289,"mtime":1611436746899,"results":"176","hashOfConfig":"93"},{"size":4988,"mtime":1611431100192,"results":"177","hashOfConfig":"93"},{"size":2255,"mtime":1611326254218,"results":"178","hashOfConfig":"93"},{"size":2928,"mtime":1611137112898,"results":"179","hashOfConfig":"93"},{"size":1955,"mtime":1611137112891,"results":"180","hashOfConfig":"93"},{"size":3979,"mtime":1611326254208,"results":"181","hashOfConfig":"93"},{"size":1961,"mtime":1611011755806,"results":"182","hashOfConfig":"93"},{"size":2447,"mtime":1611359362686,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"15e2un3",{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"186"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"186"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"186"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"186"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"186"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"186"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"186"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"186"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"186"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"186"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"186"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"186"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"186"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"186"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"186"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"186"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"186"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"186"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"186"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"186"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"186"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"186"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"186"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"186"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"186"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"186"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"186"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"186"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"186"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"186"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"186"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"186"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"186"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"186"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"186"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"386"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"186"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"186"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"186"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"186"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"186"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\index.js",[],["408","409"],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\store.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\socketService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\App.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\boardAction.js",["410","411"],"import { boardService } from '../../services/boardService.js'\r\nimport { cardService } from '../../services/cardService.js'\r\nimport { socketService } from '../../services/socketService.js'\r\n\r\nexport function loadBoards() {\r\n  return async dispatch => {\r\n    try {\r\n      const boards = await boardService.query()\r\n      dispatch({ type: 'SET_BOARDS', boards })\r\n    }\r\n    catch (err) {\r\n      console.log('boardActions: err in loadboards', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function cleanBoard() {\r\n  return async dispatch => {\r\n    dispatch({ type: 'SET_BOARD', board: null })\r\n    socketService.off('board update')\r\n  }\r\n}\r\nexport function updateBoard(board, newBoard) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch({ type: 'SET_BOARD', board: newBoard }) //drag end drop deley\r\n      boardService.updateBoard({ ...newBoard })\r\n    }\r\n    catch (err) {\r\n      dispatch({ type: 'SET_BOARD', board }) // if server returns error \r\n      console.log('boardActions: could not save', err);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport function getBoardById(id) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await boardService.getById(id)\r\n      socketService.emit('join board', board._id)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n      socketService.on('board update', updatedBoard => {\r\n        console.log('got socket event');\r\n        dispatch({ type: 'SET_BOARD', board: updatedBoard })\r\n      })\r\n      return board\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addBoard(newBoard) {\r\n  return async dispatch => {\r\n    const board = await boardService.addBoard(newBoard)\r\n    dispatch({ type: 'ADD_BOARD', board })\r\n  }\r\n}\r\n\r\nexport function addGroup(board, group) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.addGroup(board, group)\r\n      dispatch({ type: 'SET_BOARD', board: newBoard })\r\n      boardService.updateBoard(newBoard)\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport function addCard(board, group, cardToAdd) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.addCard(board, group, cardToAdd)\r\n      dispatch({ type: 'SET_BOARD', board: newBoard })\r\n      boardService.updateBoard(newBoard)\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function updateBoardCard(board, card) {\r\n  return async dispatch => {\r\n    try {\r\n      const updatedBoard = await boardService.updateBoardCard(board, card)\r\n      console.log(updatedBoard);\r\n      dispatch({ type: 'SET_BOARD', board: updatedBoard }) //drag end drop deley\r\n      boardService.updateBoard({ ...updatedBoard })\r\n    }\r\n    catch (err) {\r\n      dispatch({ type: 'SET_BOARD', board }) // if server returns error \r\n      console.log('boardActions: could not save', err);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport function openLabel() {\r\n  return dispatch => {\r\n    dispatch({ type: 'OPEN-LABELS' })\r\n  }\r\n}\r\n\r\nexport function setBackground(board, background) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.setStyle(board, background)\r\n      dispatch({ type: 'SET_BOARD', board: newBoard })\r\n      boardService.updateBoard(newBoard)\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateCardLocation(board, source, destination) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.updateCardLocation(board, source, destination)\r\n      dispatch({ type: 'SET_BOARD', board: newBoard })\r\n      boardService.updateBoard(newBoard)\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateGroupLoaction(board, groupId, source, destination) {\r\n  return async dispatch => {\r\n    try {\r\n      const updatedBoard = await boardService.updateGroupLoaction(board, groupId, source, destination)\r\n      dispatch({ type: 'SET_BOARD', board: updatedBoard }) //drag end drop deley\r\n      console.log('the updated one', updatedBoard);\r\n      boardService.updateBoard(updatedBoard)\r\n    }\r\n    catch (err) {\r\n      dispatch({ type: 'SET_BOARD', board }) // if server returns error \r\n      console.log('boardActions: could not save', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function editGroupTitle(board, group, groupTitle) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.updateGroupTitle(board, group, groupTitle)\r\n      dispatch({ type: 'SET_BOARD', board: newBoard })\r\n      boardService.updateBoard(newBoard)\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport function copyList(board, group) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.copyList(board, group)\r\n        dispatch({ type: 'SET_BOARD', board: newBoard })\r\n        boardService.updateBoard(newBoard)\r\n      }\r\n      catch (err) {\r\n        console.log('err in loadBoard', err)\r\n        dispatch({ type: 'SET_BOARD', board })\r\n  \r\n      }\r\n  }\r\n}\r\n\r\nexport function setFilter(filterBy) {\r\n  return (dispatch) => {\r\n    const action = {\r\n      type: 'SET_GROUPS_FILTER',\r\n      filterBy\r\n    }\r\n    dispatch(action)\r\n  }\r\n}\r\n\r\nexport function editCurrLabel(board, label, selectedColorLabel, act) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.editCurrLabel(board, label, selectedColorLabel, act)\r\n        dispatch({ type: 'SET_BOARD', board: newBoard })\r\n        boardService.updateBoard(newBoard)\r\n      }\r\n      catch (err) {\r\n        console.log('err in loadBoard', err)\r\n        dispatch({ type: 'SET_BOARD', board })\r\n  \r\n      }\r\n  }\r\n}\r\n\r\nexport function moveCard(board, card, to) {\r\n  return async dispatch => {\r\n    try {\r\n      const newBoard = await boardService.moveCard(board, card, to)\r\n        dispatch({ type: 'SET_BOARD', board: newBoard })\r\n        boardService.updateBoard(newBoard)\r\n      }\r\n      catch (err) {\r\n        console.log('err in loadBoard', err)\r\n        dispatch({ type: 'SET_BOARD', board })\r\n  \r\n      }\r\n  }\r\n}\r\n\r\nexport function onArchiveList(currBoard, currGroup) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await boardService.archiveList(currBoard, currGroup)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function onArchiveCard(currBoard, currGroup, card) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await boardService.archiveCard(currBoard, currGroup, card)\r\n      dispatch({ type: 'SET_BOARD', board })\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function sortCards(currBoard, sortBy, group) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await boardService.sortCards(currBoard, sortBy, group)\r\n      console.log('board in action after changes', board);\r\n      dispatch({ type: 'SET_BOARD', board })\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function moveGroup(boards,currBoard, currGroup,  destinationBoard, position) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await boardService.moveGroup(boards,currBoard, currGroup, destinationBoard, position)\r\n      // dispatch({ type: 'SET_BOARD', board })\r\n    }\r\n    catch (err) {\r\n      console.log('err in loadBoard', err);\r\n    }\r\n  }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardList.jsx",["412","413","414","415","416","417"],"import { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadBoards, addBoard } from '../store/actions/boardAction.js'\r\nimport { BoardPreview } from './BoardPreview'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { BoardsPick } from '../pages/BoardsPick'\r\nimport { HomePickModal } from './HomePickModal'\r\nimport { Link } from 'react-router-dom';\r\nimport { templateService } from '../services/templateService.js'\r\nimport Templates from './Templates.jsx';\r\nimport { TemplatePreview } from './TemplatePreview'\r\n\r\nimport img  from '../templates/templatesBg/falafel.gif'\r\nimport img2  from '../templates/templatesBg/falafel-bg.png'\r\nimport img3  from '../templates/templatesBg/design-system.png'\r\nimport img4  from '../templates/templatesBg/design.png'\r\nimport img5  from '../templates/templatesBg/buisness-template.png'\r\n\r\n\r\nclass _BoardList extends Component {\r\n\r\n    state = {\r\n        userBoards: [],\r\n        isModalOpen: false,\r\n        currTemplate: null,\r\n        templates: [],\r\n        type: '',\r\n        isTemplatesOpen: false,\r\n        isPreviewOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const templates = templateService.query()\r\n        this.setState({ templates })\r\n        this.props.loadBoards()\r\n        const { boards, loggedUser } = this.props\r\n        if (boards && loggedUser) {\r\n            const userBoards = boards.filter(board => board.createdBy?._id === loggedUser?._id)\r\n            this.setState({ userBoards })\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            const { boards, loggedUser } = this.props\r\n            const userBoards = boards.filter(board => board.createdBy?._id === loggedUser?._id) //shuold be on server side\r\n            this.setState({ userBoards })\r\n        }\r\n    }\r\n\r\n    closeModal = (ev) => {\r\n        ev.stopPropagation()\r\n        ev.preventDefault()\r\n        this.setState({ isModalOpen: false })\r\n    }\r\n\r\n    openModal = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        this.setState({ isModalOpen: true })\r\n    }\r\n\r\n    openTemplates = () => {\r\n\r\n    }\r\n\r\n\r\n    OnChoosingCategory = (type) => {\r\n        this.setState({ type, isTemplatesOpen: true, isPreviewOpen: false })\r\n    }\r\n\r\n    goBackToBoard = (template) => {\r\n        if (template) this.props.addBoard(template)\r\n\r\n        this.setState({ isTemplatesOpen: false, isPreviewOpen: false })\r\n    }\r\n\r\n    setTemplatePreview = (template) => {\r\n        this.setState({ currTemplate: template, isPreviewOpen: true, isTemplatesOpen: false })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        console.log(img);\r\n        const { boards, loggedUser, addBoard } = this.props\r\n        const { userBoards, isModalOpen, templates, type, isTemplatesOpen,isPreviewOpen,currTemplate } = this.state\r\n        if (!boards) return null\r\n        if (!userBoards) return null\r\n        return (\r\n            <div className='home-container' onClick={this.closeModal}>\r\n\r\n\r\n                <aside>\r\n\r\n                    <div className='aside-btn'>\r\n                        <span> <DashboardIcon /></span>\r\n                        <span onClick={()=>this.goBackToBoard(null)}>Boards </span>\r\n                    </div>\r\n\r\n                    <div onClick={this.openTemplates} className='aside-btn'>\r\n                        <span><FileCopyIcon /></span>\r\n                        <span>Templates </span>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <li onClick={() => this.OnChoosingCategory('Business')}>business</li>\r\n                            <li onClick={() => this.OnChoosingCategory('Cooking')}>Cooking</li>\r\n                            <li onClick={() => this.OnChoosingCategory('Design')}>Design</li>\r\n                            <li onClick={() => this.OnChoosingCategory('Projact Managment')}>Projact Managment</li>\r\n                            <li onClick={() => this.OnChoosingCategory('sales')}>sales</li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </aside>\r\n\r\n\r\n\r\n                {!isTemplatesOpen && !isPreviewOpen && <BoardPreview boards={boards} userBoards={userBoards} openModal={this.openModal} /> }\r\n                \r\n                {isModalOpen && <HomePickModal closeModal={this.closeModal} loggedUser={loggedUser} addBoard={addBoard} />}\r\n\r\n                {isTemplatesOpen && <Templates setTemplatePreview={this.setTemplatePreview} templates={templates} type={type} /> } \r\n\r\n                {isPreviewOpen && currTemplate&&  <TemplatePreview template={currTemplate} goBackToBoard={this.goBackToBoard}/>}\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.boardModule.boards,\r\n        loggedUser: state.userModule.loggedUser\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadBoards,\r\n    addBoard\r\n}\r\nexport const BoardList = connect(mapStateToProps, mapDispatchToProps)(_BoardList)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\userService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\cardService.js",["418"],"import { utilService } from './utilService'\r\n\r\nexport const cardService = {\r\n    getCardById,\r\n    getCards,\r\n    getCardLabels,\r\n    getCardForUpdate,\r\n    updateChecklistTodo,\r\n    removeChecklist,\r\n    getActivityToAdd,\r\n    getCommentToAdd,\r\n    handleChecklistDrag,\r\n    handleTodoDrag\r\n\r\n}\r\n\r\nfunction getCardById(board, cardId) {\r\n    var currCard\r\n    board.groups.forEach(group => group.cards.forEach(card => {\r\n        if (card.id === cardId) currCard = JSON.parse(JSON.stringify(card))\r\n    }))\r\n    if (!currCard) return null\r\n    const labels = getCardLabels(board, currCard.labels)\r\n    const activities = _getCardActivities(board, cardId)\r\n    return { ...currCard, labels, activities }\r\n}\r\n\r\nfunction getCardForUpdate(card) {\r\n    const labels = card.labels.map(label => label?.id)\r\n    const newCard = JSON.parse(JSON.stringify(card))\r\n    console.log(newCard);\r\n    delete newCard.activities\r\n    // const newCard = JSON.parse(JSON.stringify(card))  //got error on json actions\r\n    return { ...newCard, labels }\r\n\r\n\r\n}\r\nfunction _getCardActivities(board, cardId) {\r\n    return board.activities.filter(act => act.card.id === cardId)\r\n}\r\n\r\nfunction getCardLabels(board, labels) {\r\n    return board.labels.filter(label => labels?.includes(label.id))\r\n}\r\n\r\nfunction getCards(group) {\r\n    const cards = group.cards\r\n    return cards\r\n}\r\n\r\nfunction updateChecklistTodo(card, checklist, todo) {\r\n    const todoToUpdate = JSON.parse(JSON.stringify(todo))\r\n    const newCard = JSON.parse(JSON.stringify(card))\r\n    if (todoToUpdate.id) var todos = checklist.todos.map(todo => (todo.id === todoToUpdate.id) ? todoToUpdate : todo)\r\n    else {\r\n        todoToUpdate.id = utilService.makeId()\r\n        todos = [...checklist.todos, todoToUpdate]\r\n    }\r\n    const currChecklist = { ...checklist, todos }\r\n    const checklists = card.checklists.map(checklist => (checklist.id === currChecklist.id) ? currChecklist : checklist)\r\n    return { ...newCard, checklists }\r\n}\r\n\r\nfunction removeChecklist(card, currChecklist) {\r\n    const checklists = card.checklists.filter(checklist => checklist.id !== currChecklist.id)\r\n    const newCard = JSON.parse(JSON.stringify(card))\r\n    return { ...newCard, checklists }\r\n}\r\n\r\nfunction getActivityToAdd(card, user, txt) {\r\n\r\n    return {\r\n        id: utilService.makeId(),\r\n        txt,\r\n        createdAt: Date.now(),\r\n        createdBy: user,\r\n        card: {\r\n            id: card.id,\r\n            title: card.title\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction getCommentToAdd(txt, user) {\r\n    return { txt, createdAt: Date.now(), createdBy: user, id: utilService.makeId() }\r\n}\r\n\r\n\r\nfunction handleTodoDrag(board, card, res) {\r\n    var newCard\r\n    if (res.type = 'checklists') newCard = cardService.handleChecklistDrag(card, res)\r\n    return newCard\r\n\r\n}\r\n\r\nfunction handleChecklistDrag( card, res) {\r\n    console.log(card);\r\n    const checklists = [...card.checklists]\r\n    const checklist = checklists.splice(res.source.index, 1)[0]\r\n    checklists.splice(res.destination.index, 0, checklist)\r\n    const newCard = { ...card, checklists }\r\n    console.log(newCard)\r\n    return newCard\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Dashboard.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Templates.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Signup.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Login.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Header.jsx",["419","420"],"import { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../store/actions/userActions'\r\n\r\n//icons:\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\nimport InsertChartIcon from '@material-ui/icons/InsertChart';\r\n\r\n//cmps:\r\nimport { MenuMapShow } from './menu/menuFirstSee/MenuMapShow';\r\nimport { UserMenuModal } from './UserMenuModal';\r\nimport { MyAvatar } from './MyAvatar';\r\nimport { UserBoardsModal } from './UserBoardsModal';\r\n\r\nclass _Header extends Component {\r\n    \r\n    state = {\r\n        isUserModalOpen: false,\r\n        isBoardsModalOpen: false\r\n    }\r\n\r\n    toggleMemberModal = () => { \r\n        const {isUserModalOpen} = this.state\r\n        this.setState({ isUserModalOpen: !isUserModalOpen }) \r\n    }\r\n    toggleBoardsModal = () => { \r\n        const {isBoardsModalOpen} = this.state\r\n        this.setState({ isBoardsModalOpen: !isBoardsModalOpen }) \r\n    }\r\n\r\n    render() {\r\n        const { isUserModalOpen, isBoardsModalOpen } = this.state\r\n        const { board, boards, loggedUser, logout, style } = this.props\r\n        // console.log('user', createdBy, 'board', board);\r\n        return (\r\n            <header style={style} className=\"main-header flex space-bt\">\r\n                <div className=\"flex align-center\">\r\n                    <Link to=\"/\"><HomeOutlinedIcon /></Link>\r\n                    <Link to=\"/board\"><AppsIcon /></Link>\r\n                    <span onClick={this.toggleBoardsModal} className=\"show-boards flex align-center\"><InsertChartIcon style={{transform: 'rotate(180deg)'}}/> Boards</span>\r\n                </div>\r\n\r\n                <h2 className=\"app-logo\">Fello</h2>\r\n\r\n                <div className=\"flex align-center\">\r\n                    <Link to=\"/\"><AddIcon /></Link>\r\n                    <Link to=\"/dashboard\"><DashboardIcon /></Link>\r\n                    {loggedUser ? <div onClick={this.toggleMemberModal}> <MyAvatar user={loggedUser} /></div>\r\n                        :\r\n                        <span onClick={this.toggleMemberModal}> <AccountCircleIcon /></span>}\r\n                    {isUserModalOpen && <UserMenuModal logout={logout} closeModal={this.toggleMemberModal} board={board} user={loggedUser} />}\r\n                    {isBoardsModalOpen && <UserBoardsModal logout={logout} closeModal={this.toggleBoardsModal} boards={boards} user={loggedUser}/>}\r\n                </div>\r\n            </header>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedUser: state.userModule.loggedUser,\r\n        board: state.boardModule.board,\r\n        boards: state.boardModule.boards\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logout\r\n}\r\n\r\n\r\nexport const Header = connect(mapStateToProps, mapDispatchToProps)(_Header)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\boardService.js",["421","422","423"],"import { utilService } from './utilService'\r\nimport { httpService } from './httpService'\r\nimport { cardService } from './cardService'\r\n\r\n\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    addCard,\r\n    addGroup,\r\n    updateBoardCard,\r\n    updateCardLocation,\r\n    updateGroupLoaction,\r\n    addBoard,\r\n    updateGroupTitle,\r\n    updateBoardDesc,\r\n    getActivities,\r\n    setStyle,\r\n    copyList,\r\n    editCurrLabel,\r\n    updateBoard,\r\n    moveCard,\r\n    archiveList,\r\n    archiveCard,\r\n    sortCards,\r\n    moveGroup\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nasync function query() {\r\n    try {\r\n        const boards = await httpService.get('/board')\r\n        return boards\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nasync function getById(id) {\r\n    try {\r\n        const board = await httpService.get('/board/' + id)\r\n        return board\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\nasync function addBoard(board) {\r\n        const copy = JSON.parse(JSON.stringify(board))\r\n    try {\r\n        const boardAfter = await httpService.post('/board', copy)\r\n        return boardAfter\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\nasync function updateBoardCard(currBoard, card) {\r\n    const board = JSON.parse(JSON.stringify(currBoard))\r\n    const cardToUpdate = cardService.getCardForUpdate(card)\r\n    const newGroups = board.groups.map(group => {\r\n        const cards = group.cards.map(card => (card.id === cardToUpdate.id) ? cardToUpdate : card)\r\n        return { ...group, cards }\r\n    })\r\n    const newBoard = { ...board, groups: newGroups }\r\n    return newBoard\r\n}\r\n\r\nasync function addCard(board, group, currCard, isAddingToTop) {\r\n    const card = { ...currCard, createdAt: Date.now(), id: utilService.makeId() }\r\n    const newGroup = (isAddingToTop) ? { ...group, cards: [card, ...group.cards] } : { ...group, cards: [...group.cards, card] }\r\n    const newGroups = board.groups.map(group => (group.id === newGroup.id ? newGroup : group))\r\n    const newBoard = { ...board, groups: newGroups }\r\n   return newBoard\r\n}\r\n\r\n\r\nasync function addGroup(board, group) {\r\n    const newGroup = { ...group, createdAt: Date.now(), id: utilService.makeId() }\r\n    const newGroups = [...board.groups, newGroup]\r\n    const newBoard = { ...board, groups: newGroups }\r\n    return newBoard\r\n}\r\n\r\nfunction updateCardLocation(board, source, destination) {\r\n    const currBoard = JSON.parse(JSON.stringify(board))\r\n    const fromGroupIdx = currBoard.groups.findIndex(group => group.id === source.droppableId)\r\n    const toGroupIdx = currBoard.groups.findIndex(group => group.id === destination.droppableId)\r\n    const currCard = currBoard.groups[fromGroupIdx].cards[source.index]\r\n    currBoard.groups[fromGroupIdx].cards.splice(source.index, 1)\r\n    currBoard.groups[toGroupIdx].cards.splice(destination.index, 0, currCard)\r\n    return currBoard\r\n}\r\n\r\nasync function updateGroupLoaction(board, groupId, source, destination) {\r\n    console.log(board);\r\n    const currBoard = JSON.parse(JSON.stringify(board))\r\n    const currGroup = currBoard.groups.find(group => group.id === groupId)\r\n    currBoard.groups.splice(source.index, 1)\r\n    currBoard.groups.splice(destination.index, 0, currGroup)\r\n    return currBoard\r\n}\r\n\r\nasync function updateGroupTitle(board, currGroup, title) {\r\n    const newGroups = board.groups.map(group => (group.id === currGroup.id) ? { ...group, title } : group)\r\n    const newBoard = { ...board, groups: newGroups }\r\n    return newBoard\r\n\r\n}\r\n\r\nasync function setStyle(board, background) {\r\n    const newBoard = { ...board, style: background }\r\n   return newBoard\r\n}\r\n\r\nasync function updateBoardDesc(board, description) {\r\n    const newBoard = { ...board, description }\r\n    try {\r\n        const boardAfter = await httpService.put('/board/' + newBoard._id, newBoard)\r\n        return boardAfter\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nfunction getActivities(board, filter) {\r\n    const cardsComments = []\r\n    board.groups.forEach(group => group.cards.forEach(card => {\r\n        if (card.comments) cardsComments.push(...card.comments)\r\n    }))\r\n    if (filter === 'all') return [...cardsComments, ...board.activities]\r\n    else return [...cardsComments]\r\n}\r\n\r\nasync function copyList(board, currGroup) {\r\n    const boardCopy = JSON.parse(JSON.stringify(board))\r\n    const groupCopy = JSON.parse(JSON.stringify(currGroup))\r\n    groupCopy.id = utilService.makeId()\r\n    groupCopy.cards.forEach(card => card.id = utilService.makeId())\r\n    const groupIdx = board.groups.findIndex(group => group.id === currGroup.id)\r\n    boardCopy.groups.splice((groupIdx + 1), 0, groupCopy)\r\n    return boardCopy\r\n\r\n}\r\n\r\n\r\nasync function editCurrLabel(board, currLabel, deleteOption) {\r\n\r\n    if (currLabel.id) {\r\n        if (deleteOption !== 'delete') {\r\n            var labels = board.labels.map(label => (label.id === currLabel.id) ? currLabel : label)\r\n        } else {\r\n            var labels = board.labels.filter(label => (label.id !== currLabel.id))\r\n        }\r\n    }\r\n    else {\r\n        currLabel.id = utilService.makeId()\r\n        var labels = [...board.labels, currLabel]\r\n    }\r\n    const newBoard = { ...board, labels }\r\n\r\n   return newBoard\r\n}\r\n\r\n\r\nasync function archiveList(currBoard, currGroup) {\r\n    const newBoard = { ...currBoard, groups: currBoard.groups.filter(group => group.id !== currGroup.id), archives: { ...currBoard.archives, groups: [...currBoard.archives.groups, currGroup] } }\r\n    try {\r\n        const boardAfter = await httpService.put('/board/' + newBoard._id, newBoard)\r\n        return boardAfter\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function updateBoard(board) {\r\n    try {\r\n        const boardAfter = await httpService.put('/board/' + board._id, board)\r\n        return boardAfter\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\nasync function moveCard(currBoard, currCard, to) {\r\n    console.log('currBoard, currCard, to', currBoard, currCard, to)\r\n    const groups = currBoard.groups.map((group, idx) => {\r\n        var cards\r\n        if (idx !== +to.groupIdx) {\r\n            cards = group.cards.filter(card => card.id !== currCard.id)\r\n        }\r\n        else {\r\n            cards = [...group.cards]\r\n            cards.splice(+to.cardIdx, 0, currCard)\r\n        }\r\n        return { ...group, cards }\r\n    })\r\n    const board = { ...currBoard, groups }\r\n    return board\r\n}\r\n\r\nasync function archiveCard(currBoard, currGroup, currCard) {\r\n    const newBoard = { ...currBoard }\r\n    const groupIdx = currBoard.groups.findIndex(group => group.id === currGroup.id)\r\n    const newCards = currBoard.groups[groupIdx].cards.filter(card => card.id !== currCard.id)\r\n    newBoard.groups[groupIdx].cards = newCards\r\n    newBoard.archives.cards.unshift(currCard)\r\n    try {\r\n        const boardAfter = await httpService.put('/board/' + newBoard._id, newBoard)\r\n        return boardAfter\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n function sortCards(board,sortBy,currGroup) {\r\n    const boardCopy=JSON.parse(JSON.stringify(board))\r\n    const groupIdx=boardCopy.groups.findIndex(group=>group.id===currGroup.id)\r\n    if(sortBy==='name'){\r\n        var sortedCards=boardCopy.groups[groupIdx].cards.sort((a, b) => a.title.localeCompare(b.title))\r\n        boardCopy.groups[groupIdx].cards=sortedCards\r\n        return updateBoard(boardCopy)\r\n    }\r\n}\r\n\r\nasync function moveGroup(boards,currBoard,currGroup,destinationBoard,position){\r\n     const allBoards= JSON.parse(JSON.stringify(boards))\r\n\r\n    // const copyBoard = JSON.parse(JSON.stringify(currBoard))\r\n    // const currGroupIdx = copyBoard.groups.findIndex(group=>group.id===currGroup.idx)\r\n    //  copyBoard.groups.splice(currGroupIdx,1)\r\n    //  destinationBoard.groups.splice(position,0,newGroup)\r\n     try {\r\n        // const originBoardAfter = await httpService.put('/board/' + currBoard._id, currBoard)\r\n        // console.log('the board after',originBoardAfter);\r\n        // const boardAfter = await httpService.put('/board/' + destinationBoard._id, destinationBoard)\r\n        // return originBoardAfter\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Board.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\templateService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\Home.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\HomePickModal.jsx",["424"],"import React, { Component } from 'react'\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nexport class HomePickModal extends Component {\r\n\r\n\r\n    state = {\r\n        bgColors: [\r\n            { color: 'lightgray', isSelected: false },\r\n            { color: '#adad85', isSelected: false },\r\n            { color: 'coral', isSelected: false },\r\n            { color: 'lightpink', isSelected: false },\r\n            { color: 'crimson', isSelected: false },\r\n            { color: 'yellowgreen', isSelected: false },\r\n            { color: 'teal', isSelected: false },\r\n            { color: 'blue', isSelected: false },\r\n            { color: '#3385ff', isSelected: false }\r\n        ],\r\n        board: {\r\n            type: ['trip', 'sales'],\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            archives: {\r\n                groups: [],\r\n                cards: []\r\n            },\r\n\r\n            style: {\r\n                isCover: false,\r\n                background: {\r\n                    backgroundColor: '',\r\n                    backgroundImage: ''\r\n                }\r\n            },\r\n            isPrivate: false,\r\n    \r\n            'labels' : [\r\n                {\r\n                    'id' : 'l101',\r\n                    'title' : 'fun',\r\n                    'color' : '#F2D600'\r\n                },\r\n                {\r\n                    'id' : 'l102',\r\n                    'title' : '',\r\n                    'color' : '#FF9F1A'\r\n                },\r\n                {\r\n                    'id' : 'l103',\r\n                    'title' : 'important',\r\n                    'color' : '#EB5B46'\r\n                },\r\n                {\r\n                    'id' : 'l104',\r\n                    'title' : '',\r\n                    'color' : '#C377E0'\r\n                },\r\n                {\r\n                    'id' : 'l105',\r\n                    'title' : '',\r\n                    'color' : '#01C2DF'\r\n                },\r\n                {\r\n                    'id' : 'l106',\r\n                    'title' : '',\r\n                    'color' : '#52E898'\r\n                }\r\n            ],\r\n            members: [],\r\n            groups: [],\r\n            activities: []\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleChange = (ev) => {\r\n        const { value } = ev.target\r\n        const { board } = this.state\r\n        const { loggedUser } = this.props\r\n        this.setState({ board: { ...board, title: value } })\r\n    }\r\n\r\n    onColorPick = (color) => {\r\n        const { board } = this.state\r\n        this.setState({ board: { ...board, style: { ...board.style, backgroundColor: color } } })\r\n    }\r\n\r\n    onCreateBoard = (ev) => {\r\n        const { board } = this.state\r\n        const { closeModal,loggedUser, addBoard } = this.props\r\n        if (loggedUser) {\r\n            addBoard(board)\r\n            this.setState({\r\n                board: {\r\n                    title: '',\r\n                    createdAt: Date.now(),\r\n                    archives: {},\r\n                    style: {},\r\n                    isPrivate: false,\r\n            \r\n                    labels: [],\r\n                    members: [],\r\n                    groups: [],\r\n                    activities: []\r\n                }\r\n            })\r\n        }\r\n        closeModal(ev)\r\n    }\r\n\r\n    render() {\r\n        const { bgColors } = this.state\r\n        return (\r\n\r\n            <div className='modal-container'>\r\n\r\n                <div className='add-board' onClick={(ev) => {\r\n                    ev.preventDefault()\r\n                    ev.stopPropagation()\r\n                }}>\r\n\r\n                    <div className='title-container'>\r\n\r\n                        <input type=\"text\" placeholder='Add board title' onChange={this.handleChange} />\r\n                        <ClearIcon />\r\n\r\n                    </div>\r\n\r\n                    <div className='color-picker-container'>\r\n\r\n                        {bgColors.map(bgc => <div className='color-picker' onClick={() => this.onColorPick(bgc.color)} style={{ backgroundColor: bgc.color }}> </div>)}\r\n\r\n                    </div>\r\n\r\n\r\n                    <button onClick={this.onCreateBoard} >create board</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\TemplatePreview.jsx",["425","426"],"import React, { Component } from 'react'\r\nimport { addBoard } from '../store/actions/boardAction';\r\nimport Templates from './Templates';\r\nimport img from '../templates/templatesBg/design-system.png'\r\n\r\n\r\nexport class TemplatePreview extends Component {\r\n\r\n    render() {\r\n        console.log(img);\r\n        const { template, goBackToBoard } = this.props\r\n        console.log(template);\r\n        return (\r\n            <div className='template-preview'>\r\n                <button onClick={() => goBackToBoard(template)}>Create Template</button>\r\n                <div className='description-container' >\r\n                    <h2>About This Template</h2>\r\n                    {template.description}\r\n                </div>\r\n\r\n                <div className=\"img-container\" style={{ backgroundImage: template.templateImg }} >\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\pages\\BoardsPick.jsx",["427","428","429"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { loadBoards, addBoard } from '../store/actions/boardAction'\r\n// import { BoardList } from '../cmps/BoardList'\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport homeImgSrc from '../assets/bgImgs/home-bg.jpg'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\n\r\nclass _BoardsPick extends Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n        bgColors: [\r\n            { color: 'lightgray', isSelected: false },\r\n            { color: '#adad85', isSelected: false },\r\n            { color: 'coral', isSelected: false },\r\n            { color: 'lightpink', isSelected: false },\r\n            { color: 'crimson', isSelected: false },\r\n            { color: 'yellowgreen', isSelected: false },\r\n            { color: 'teal', isSelected: false },\r\n            { color: 'blue', isSelected: false },\r\n            { color: '#3385ff', isSelected: false }\r\n        ],\r\n        board: {\r\n            _id: '',\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            style: {},\r\n            isPrivate: false,\r\n            createdBy: {},\r\n            labels: [],\r\n            members: [],\r\n            groups: [],\r\n            activities: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadBoards()\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        const { value } = ev.target\r\n        const { board } = this.state\r\n        this.setState({\r\n            board: { ...board, title: value }\r\n        })\r\n    }\r\n\r\n    setBgColor = (color) => {\r\n        const { board } = this.state\r\n        this.setState({\r\n            board: { ...board, style: { ...board.style, backgroundColor: color } }\r\n        })\r\n    }\r\n\r\n    closeModal = () => {\r\n        let isOpen = this.state.isOpen\r\n        if (isOpen) this.setState({ isOpen: false })\r\n    }\r\n\r\n    addBoard = () => {\r\n        const { board } = this.state\r\n        this.props.addBoard(board)\r\n        this.setState({ isOpen: false })\r\n    }\r\n\r\n    //     toggleTrash = (boardIdx) => {\r\n    // let \r\n    //     }\r\n\r\n    render() {\r\n        const { isOpen, bgColors } = this.state\r\n        const { boards } = this.props\r\n        return (\r\n\r\n            <section className=\"boards-pick-main-container\" >\r\n                <section className=\"boards-container\">\r\n                    <p className=\"pick-title\">Public Boards</p>\r\n                    <section className=\"board-opts\">\r\n\r\n                        <section className=\"board-op create-board\" onClick={() => this.setState({ isOpen: true })}>\r\n                            <h1>Create new board</h1>\r\n                            <AddBoxIcon className=\"create-board-btn\" />\r\n\r\n                        </section>\r\n                        {isOpen && <section className=\"new-board-modal\">\r\n                            <div>\r\n                                <input type=\"text\" placeholder=\"Add board title\" onChange={this.handleChange} />\r\n                            </div>\r\n                            <div className=\"color-picker\">\r\n                                {bgColors.map((bg, idx) => {\r\n                                    return <div className=\"color\" key={idx} style={{ backgroundColor: bg.color }} onClick={() => this.setBgColor(bg.color)}>\r\n                                        {bg.isSelected && <span>✔</span>}\r\n                                    </div>\r\n                                })}\r\n                            </div>\r\n                            <button className=\"add-board-btn\" onClick={this.addBoard}> Add Board</button>\r\n\r\n                        </section>\r\n                        }\r\n\r\n                        <section className=\"my-boards\">\r\n                            {boards && boards.map((board, idx) => {\r\n                                return (\r\n                                    <div key={board.id} >\r\n                                        <Link to={`/board/${board._id}`}>\r\n                                            <div key={idx} className=\"board-op\" key={board._id} style={board.style}>\r\n                                                {board.title}\r\n                                            </div>\r\n                                        </Link>\r\n                                        {/* <span className=\"delete-board-btn\"><DeleteOutlineIcon /></span> */}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </section>\r\n                    </section>\r\n                </section>\r\n            </section>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        boards: state.boardModule.boards\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadBoards,\r\n    addBoard\r\n}\r\n\r\n\r\nexport const BoardsPick = connect(mapStateToProps, mapDispatchToProps)(_BoardsPick)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardPreview.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\httpService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\utilService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\reviewReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\systemReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\cardReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\reducers\\menuReducer.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\MyAvatar.jsx",["430"],"import { makeStyles } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }))\r\n\r\nexport function MyAvatar(props){\r\n     const classes = useStyles()\r\n     const {user, style} = props\r\n    if (!user) return null\r\n    if (user.imgUrl) return  <Avatar style={style} alt={user.fullname} className={classes.small} src={user.imgUrl} />\r\n    return <Avatar style={style} className={classes[user.color], classes.small}>{user.fullname?.substring(0, 1)}</Avatar>\r\n\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\UserBoardsModal.jsx",["431"],"import { Link } from \"react-router-dom\"\r\n\r\nexport function UserBoardsModal(props) {\r\n    const { boards, closeModal, user } = props\r\n    const userBoards = boards.filter(board => board.createdBy?._id === user?._id)\r\n\r\n    function onCloseModal(ev) {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <div onClick={onCloseModal} className=\"user-menu-screen\">\r\n            <div className=\"user-boards-modal\">\r\n\r\n                <div className=\"modal-content flex col\">\r\n                    {userBoards && <div className=\"flex col\">\r\n                        <small>My Boards</small>\r\n                        {userBoards.map(board =>\r\n                            <div onClick={() => window.open('#/board/' + board._id, \"_self\")} className=\"board-preview flex  align-center\">\r\n                                <div className=\"bg\" style={board.style} />\r\n                                <div>{board.title || '(No title...)'}</div>\r\n                            </div>\r\n                        )}\r\n                    </div>}\r\n\r\n                    {boards && <div className=\"flex col\">\r\n                        <hr />\r\n                        <small>Boards</small>\r\n                        {boards.map(board =>\r\n                            <div onClick={() => window.open('#/board/' + board._id, \"_self\")} className=\"board-preview flex  align-center\">\r\n                                <div className=\"bg\" style={board.style} />\r\n                                <div>{board.title || '(No title...)'}</div>\r\n                            </div>\r\n                        )}\r\n                    </div>}\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\UserMenuModal.jsx",["432"],"import { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nimport { MyAvatar } from './MyAvatar.jsx'\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\n\r\nexport function _UserMenuModal(props) {\r\n\r\n    const { user, closeModal, logout, history } = props\r\n\r\n    async function onLogout() {\r\n        if (!user) return\r\n        await logout()\r\n        history.push('/login')\r\n    }\r\n    function onCloseModal(ev){\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <div onClick={onCloseModal} className=\"user-menu-screen\">\r\n            <div className=\"user-menu-modal card-action-modal\">\r\n                <div className=\"flex justify-center\" style={{ paddingTop: '10px' }}>\r\n                    Account\r\n            </div>\r\n                <button className=\"icon\" onClick={closeModal}><CloseSharpIcon /></button>\r\n                <hr />\r\n                <div className=\"user flex\">\r\n                    <MyAvatar user={user} />\r\n                    <div className=\"flex col\" style={{ paddingLeft: '5px' }}>\r\n                        <span style={{ lineHeight: '22px' }}>{user?.fullname}</span>\r\n                        <span style={{ fontSize: '0.8em' }}>{user?.email || 'No e-mail to show'}</span>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n\r\n                <section className=\"user-actions flex col\">\r\n                    <Link to={`/user/${user?._id}/activity`}>Activity</Link>\r\n                    <Link to={`/user/${user?._id}/card`}>Cards</Link>\r\n                    <span>Tutorial</span>\r\n                    <hr />\r\n                    {(!user || user?.isGuest) && <Link to=\"/login\">Log In</Link>}\r\n                    <button onClick={onLogout} className=\"clean-btn\" style={{ paddingBottom: '5px' }}>Log Out</button>\r\n                </section>\r\n            </div >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const UserMenuModal = withRouter(_UserMenuModal)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\Menu.jsx",["433"],"import { Component } from 'react'\r\n\r\n//cmps:\r\nimport { SectionAbout } from './menuFirstSee/menuTopOptions/SectionAbout.jsx'\r\nimport { SectionBackground } from './menuFirstSee/menuTopOptions/SectionBackground.jsx'\r\nimport { SectionSearch } from './menuFirstSee/menuTopOptions/SectionSearch.jsx'\r\nimport { SectionStickers } from './menuFirstSee/menuTopOptions/SectionStickers.jsx'\r\nimport { MenuActivity } from './menuFirstSee/MenuActivity';\r\nimport { MenuActivitiesList } from './menuFirstSee/MenuActivitiesList.jsx'\r\nimport { SectionLabels } from './menuFirstSee/menuTopOptions/SectionLabels.jsx'\r\n\r\n\r\n//icons:\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport WallpaperIcon from '@material-ui/icons/Wallpaper';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\n\r\n\r\nexport class Menu extends Component {\r\n\r\n    state = {\r\n        menuTitle: 'Menu',\r\n        currMenu: null,\r\n        inMenu: true,\r\n    }\r\n\r\n   \r\n\r\n    goBack = () => { this.setState({ currMenu: null }) }\r\n\r\n    openAbout = () => { this.setState({ menuTitle: \"About This Board\", currMenu: 'SectionAbout' }) }\r\n    openBgs = () => { this.setState({ menuTitle: \"Change Background\", currMenu: 'SectionBackground' }) }\r\n    openSearch = () => { this.setState({ menuTitle: \"Search Cards\", currMenu: 'SectionSearch' }) }\r\n    openStickers = () => { this.setState({ menuTitle: \"Stickers\", currMenu: 'SectionStickers' }) }\r\n    openMore = () => { this.setState({ menuTitle: \"More\", currMenu: 'SectionMore' }) }\r\n    openActivity = () => { this.setState({ menuTitle: \"Activity\", currMenu: 'MenuActivity' }) }\r\n    openLabels = () => { this.setState({ menuTitle: \"Labels\", currMenu: 'SectionLabels' }) }\r\n\r\n    render() {\r\n\r\n\r\n        const { currMenu, menuTitle } = this.state\r\n        const { board, isMenuOpen, toggleMenu } = this.props\r\n        if (!board.activities) return null\r\n        return (\r\n            <section className={`menu flex col ${isMenuOpen ? 'open' : ''}`}>\r\n                <div className=\"menu-top\">\r\n                    {currMenu && <button className=\"back-menu-btn\" onClick={this.goBack}><ArrowBackIosIcon /></button>}\r\n                    <h3>{(currMenu === null) ? 'Menu' : menuTitle}</h3>\r\n                    <button className=\"close-menu-btn\" onClick={toggleMenu}><CloseIcon /></button>\r\n                </div>\r\n                <hr className=\"hr-menu\" />\r\n                {currMenu === null && <section className=\"menu-options\" style={{ display: \"grid\" }}>\r\n\r\n                    <button className=\"menu-option top-option\" onClick={this.openAbout}>\r\n                        <span><InfoIcon /></span>\r\n                        <div className=\"about-all-desc\">\r\n                            <h4 className=\"about-this-board\">About This Board</h4>\r\n                            <span className=\"about-desc\">Add a description to your board</span>\r\n                        </div>\r\n                    </button>\r\n\r\n                    <button className=\"menu-option\" onClick={this.openBgs}>\r\n                        <span>< WallpaperIcon /></span>\r\n                        <h4 className=\"option-title\">Change Background</h4>\r\n                    </button>\r\n\r\n                    {/* <button className=\"menu-option\" onClick={this.openSearch}>\r\n                        <span><SearchIcon /></span>\r\n                        <h4 className=\"option-title\">Search Cards</h4>\r\n                    </button> */}\r\n\r\n                    {/* <button className=\"menu-option\" onClick={this.openStickers}>\r\n                        <span><LabelImportantIcon /></span>\r\n                        <h4 className=\"option-title\">Stickers</h4>\r\n                    </button> */}\r\n\r\n                    <button className=\"menu-option\" onClick={this.openLabels}>\r\n                        <span><LabelOutlinedIcon /></span>\r\n                        <h4 className=\"option-title\">Labels</h4>\r\n                    </button>\r\n                    <hr className=\"hr-menu\" />\r\n                    <button className=\"menu-option\" onClick={this.openActivity}>\r\n                        <span><PlaylistAddCheckIcon /></span>\r\n                        <h4 className=\"option-title\">Activity</h4>\r\n                    </button>\r\n                    <MenuActivitiesList board={board} />\r\n                    <span className=\"view-all-activities-span\" onClick={this.openActivity}>View all activity...</span>\r\n                </section>}\r\n                <DynamicCmp currMenu={currMenu} board={board} />\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction DynamicCmp({ currMenu, board }) {\r\n    switch (currMenu) {\r\n        case 'SectionAbout':\r\n            return <SectionAbout board={board} />\r\n        case 'SectionBackground':\r\n            return <SectionBackground />\r\n        case 'SectionSearch':\r\n            return <SectionSearch board={board} />\r\n        case 'SectionStickers':\r\n            return <SectionStickers />\r\n        case 'SectionLabels':\r\n            return <SectionLabels board={board} />\r\n        case 'MenuActivity':\r\n            return <MenuActivity board={board} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Loading.jsx",["434"],"import loading from '../assets/bg/loading.gif'\r\nexport function Loading() {\r\n    return (\r\n\r\n        <main className=\"loading\">\r\n            {/* <img src={loading} alt=\"\" /> */}\r\n        </main>\r\n    )\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuMapShow.jsx",["435"],"\r\nimport { Component } from 'react'\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n\r\n//icons:\r\nimport RoomIcon from '@material-ui/icons/Room';\r\n\r\n\r\nclass _MenuMapShow extends Component {\r\n    state = {\r\n        showingInfoWindow: false,\r\n        activeMarker: {},\r\n        selectedPlace: {},\r\n        gGoogleMap: ''\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"map-section\">\r\n                <Map\r\n                    google={this.props.google}\r\n                    initialCenter={{ lat: 32.0749831, lng: 34.9120554 }}\r\n                    center={this.state.center}\r\n                    zoom={14}>\r\n\r\n                    <Marker\r\n                        name={'Current location'} />\r\n\r\n                    <InfoWindow\r\n                        marker={this.state.activeMarker}\r\n                        visible={this.state.showingInfoWindow}>\r\n                        <div>\r\n                            <h1>{this.state.selectedPlace.name}</h1>\r\n                        </div>\r\n                    </InfoWindow>\r\n\r\n                </Map>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport const MenuMapShow = GoogleApiWrapper({\r\n    apiKey: ('AIzaSyBzfpQbTtSYT__Qh9PIPLUnA9xBMKj1iFY')\r\n})(_MenuMapShow)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupList.jsx",["436"],"import React, { Component } from 'react'\r\nimport { GroupPreview } from \"./GroupPreview\";\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\n\r\n\r\n\r\nexport class GroupList extends Component {\r\n\r\n    state = {\r\n        // isModalOpen:false,\r\n        group: {\r\n            title: '',\r\n            style: {},\r\n            cards: []\r\n        },\r\n        isAdding: false,\r\n        isEdit: {\r\n            isOpen: false,\r\n            id: ''\r\n        },\r\n        isMenuOpen:false\r\n    }\r\n    componentDidMount() {\r\n        this.cardRef = React.createRef()\r\n        console.log('we here');\r\n    }\r\n\r\n\r\n    handleChange = (ev) => {\r\n        const { group } = this.state\r\n        const { value } = ev.target\r\n        this.setState({\r\n            group: { ...group, title: value }\r\n        })\r\n    }\r\n\r\n    onAddGroup = () => {\r\n        const { group } = this.state\r\n        const { board } = this.props\r\n        if(group.title.length===0) return \r\n        this.props.addGroup(board, group)\r\n        this.setState({ group: { title: '', style: {}, cards: [] } })\r\n\r\n    }\r\n\r\n    handleEnter = (ev) => {\r\n        if (ev.key === 'Enter') {\r\n            ev.preventDefault()\r\n            this.onAddGroup()\r\n        }\r\n    }\r\n\r\n    discardChanges = (ev) => {\r\n        this.setState({ group: { title: '', style: {}, cards: [] } })\r\n        ev.currentTarget.blur()\r\n    }\r\n\r\n    handleDrag = (result) => {\r\n        const { board } = this.props\r\n        const { source, destination } = result\r\n\r\n        if (result.type === 'GROUP') {\r\n            const groupId = result.draggableId\r\n            this.props.updateGroupLoaction(board, groupId, source, destination)\r\n        } else {\r\n            const cardId = result.draggableId\r\n            this.props.updateCardLocation(board, source, destination)\r\n\r\n        }\r\n\r\n    }\r\n    enterEditMode = (id) => {\r\n        this.setState({ isEdit: { isOpen: true, id: id } })\r\n    }\r\n\r\n    exitEditMode = () => {\r\n        this.setState({\r\n            isEdit: { isOpen: false, id: '' }\r\n        })\r\n    }\r\n    // openMenu=()=>{\r\n    //     this.setState({isMenuOpen:true})\r\n    // }\r\n    // closeMenu=()=>{\r\n    //     this.setState({isMenuOpen:true})\r\n    // }\r\n\r\n    render() {\r\n        const { groups } = this.props.board\r\n        const { isEdit,isMenuOpen } = this.state\r\n        return (\r\n            // <DragDropContext onDragEnd={this.handleOnDragEnd}>\r\n            <DragDropContext onDragEnd={this.handleDrag}>\r\n                <Droppable droppableId=\"board\" type=\"GROUP\" direction=\"horizontal\">\r\n                    {(provided ) => (\r\n\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} className=\"group-container\" onClick={this.exitEditMode}  >\r\n                                {groups && groups.map((group, idx) => {\r\n                                    return (\r\n                                        <GroupPreview  isMenuOpen={isMenuOpen}  exitEditMode={this.exitEditMode} enterEditMode={this.enterEditMode} isEdit={isEdit} key={group.id} idx={idx} listId={group.id} group={group} />\r\n                                    )\r\n                                })}\r\n\r\n                                <div className=\"hidden-actions-form-container add-group\" >\r\n                                    <form action=\"\" className=\"hidden-actions-form\">\r\n                                        <input onKeyDown={this.handleEnter} className=\"add-list-input\" type=\"text\" placeholder=\"+ Add another list\" value={this.state.group.title} onChange={this.handleChange} />\r\n                                    </form>\r\n                                    <div className=\"hidden-actions flex list\">\r\n                                        <button onClick={this.onAddGroup}>Add List</button>\r\n                                        <button onClick={this.discardChanges} className=\"icon\">\r\n                                            <CloseSharpIcon />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                {provided.placeholder }\r\n                            </div>\r\n                            \r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\Card.jsx",["437"],"import { connect } from \"react-redux\";\r\nimport { cardService } from \"../../services/cardService.js\";\r\nimport { updateBoardCard } from \"../../store/actions/boardAction\";\r\nimport { withRouter } from \"react-router\";\r\nimport WebIcon from '@material-ui/icons/Web';\r\nimport { Component } from \"react\";\r\nimport { CardContent } from \"./CardContent\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport { CardMenu } from \"./CardMenu.jsx\";\r\nimport { DynamicCardActionModal } from \"./DynamicCardActionModal.jsx\";\r\nimport {AddDueDateModal} from \"./AddDueDateModal.jsx\";\r\n// import { CardAction } from \"./CardAction\";\r\n\r\nclass _Card extends Component {\r\n\r\n    state = {\r\n        card: null,\r\n        currModal: {},\r\n        title: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadCard()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params.cardId !== this.props.match.params.cardId) this.loadCard()\r\n        if (prevProps.board._id !== this.props.board?._id) this.loadCard()\r\n    }\r\n\r\n    loadCard = () => {\r\n        const { board } = this.props\r\n        const { cardId } = this.props.match.params\r\n        if (cardId && board.groups) {\r\n            const card = cardService.getCardById(board, cardId)\r\n            this.setState({ card, title: card.title })\r\n        } else this.setState({ card: null })\r\n    }\r\n\r\n    saveCardChanges = async (card, txt) => {\r\n        var { board, loggedUser } = this.props\r\n        if (txt) {\r\n            const activity = cardService.getActivityToAdd(card, loggedUser, txt)\r\n            board = {...board, activities: [activity, ...board.activities]}\r\n        } \r\n        await this.props.updateBoardCard(board, card)\r\n        this.loadCard()\r\n    }\r\n\r\n    onChangetitle = (ev) => {\r\n        const { value } = ev.target\r\n        this.setState({title: value })\r\n    }\r\n\r\n    onSaveTitle = (ev) => {\r\n        if (ev.key && ev.key !== 'Enter') return\r\n        const {card, title} = this.state\r\n        this.saveCardChanges({...card, title} ,'Edited card title')\r\n        ev.currentTarget?.blur()\r\n    }\r\n\r\n    closeModal = () =>{\r\n        const {currModal} = this.state\r\n        if (currModal?.name) this.setState({currModal: null})\r\n    }\r\n\r\n    setCurrModal = (currModal) => {\r\n        this.setState({currModal})\r\n    }\r\n\r\n    render() {\r\n        const { board, loggedUser } = this.props\r\n        const { card, currModal, title } = this.state\r\n        if (!card) return null\r\n        return (\r\n            <Link to={`/board/${board._id}`}>\r\n                <section onClick={this.closeModal} className={\"card-modal-screen flex justify-center\"}>\r\n                    <div onClick={(ev) => { ev.preventDefault() }} className=\"card-modal grid\">\r\n                        <div className=\"header flex\">\r\n                            <WebIcon />\r\n                            <input\r\n                                type=\"text\"\r\n                                value={title}\r\n                                onChange={this.onChangetitle}\r\n                                onBlur={this.onSaveTitle}\r\n                                onKeyDown={this.onSaveTitle}\r\n                            />\r\n                            <Link to={`/board/${board._id}`}><CloseSharpIcon /></Link>\r\n                        </div>\r\n                        <CardContent setCurrModal={this.setCurrModal} closeModal={this.closeModal} user={loggedUser} board={board} card={card} save={this.saveCardChanges} />\r\n                        <CardMenu setCurrModal={this.setCurrModal} closeModal={this.closeModal}/>\r\n                        <div  onClick={(ev) => {ev.stopPropagation(); ev.preventDefault()}}>\r\n                        <DynamicCardActionModal closeModal={this.closeModal} save={this.saveCardChanges} currModal={currModal} card={card} board={board}/>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedUser: state.userModule.loggedUser, \r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    updateBoardCard\r\n}\r\n\r\nexport const Card = withRouter(connect(mapStateToProps, mapDispatchToProps)(_Card))\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\BoardHeader.jsx",["438"],"import { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { updateBoard } from '../store/actions/boardAction';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport { MyAvatar } from './MyAvatar';\r\nimport { AddMembersModal } from './AddMembersModal';\r\n\r\nclass _BoardHeader extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        isAddModalOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { title } = this.props.board\r\n        this.setState({ title })\r\n    }\r\n\r\n    onChangeTitle = () => {\r\n        const { title } = this.state\r\n        const { board } = this.props\r\n        const newBoard = { ...board, title }\r\n        this.saveBoard(newBoard)\r\n    }\r\n\r\n    saveBoard = (boardToUpdate) => {\r\n        const { board } = this.props\r\n        this.props.updateBoard(board, boardToUpdate)\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        const { name, value } = ev.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    togglePrivate = () => {\r\n        const { board } = this.props\r\n        const newBoard = { ...board, isPrivate: !board.isPrivate }\r\n        this.saveBoard(newBoard)\r\n    }\r\n\r\n    toggleAddModal = (ev) => {\r\n        this.setState({ isAddModalOpen: !this.state.isAddModalOpen })\r\n    }\r\n\r\n    render() {\r\n        const { openArchive, board, toggleMenu } = this.props\r\n        const style = board.isPrivate ? { backgroundColor: 'rgb(152 255 155 / 42%)' } : {}\r\n        const { isAddModalOpen } = this.state\r\n        if (!board) return\r\n        console.log(board);\r\n        console.log(board.members?.length);\r\n        return (\r\n            <div className=\"board-header flex align-center space-bt\" >\r\n                <div className=\"flex\">\r\n                    <span onClick={this.togglePrivate} className=\"flex align-center\" style={style}>\r\n                        <LockOutlinedIcon />\r\n                    Private\r\n                    </span>\r\n                    <div onClick={this.toggleAddModal} className=\"members flex\">\r\n                        {board.members?.map((user, idx) => <MyAvatar style={{ left: `${-4 * idx}px` }} user={user} />)}\r\n                        <MyAvatar user={{ fullname: '+' }} style={{ left: `${-4 * board.members?.length}px` }} />\r\n                    </div>\r\n                    {isAddModalOpen && <AddMembersModal closeModal={this.toggleAddModal}/>}\r\n                    <input onChange={this.handleChange} on onBlur={this.onChangeTitle} type=\"text\" name=\"title\" value={this.state.title} autoComplete=\"off\" />\r\n                </div>\r\n\r\n                <div className=\"flex align center\">\r\n                    <span onClick={openArchive}><ArchiveOutlinedIcon /></span>\r\n                    <button onClick={toggleMenu} className=\"menu-btn flex align-center\"><MoreHorizIcon />Show Menu</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board,\r\n        boards: state.boardModule.boards,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const BoardHeader = connect(mapStateToProps, mapDispatchToProps)(_BoardHeader)","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\Archive.jsx",["439","440"],"import React, { Component } from 'react'\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\r\nimport AttachFileRoundedIcon from '@material-ui/icons/AttachFileRounded';\r\nimport PlaylistAddCheckSharpIcon from \"@material-ui/icons/PlaylistAddCheckSharp\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { MyAvatar } from './MyAvatar'\r\n\r\nexport class Archive extends Component {\r\n\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        if (!board.archives) return <h1>No archived items yet...</h1>\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <h3> ARCHIVE</h3>\r\n                <div className='group-container'>\r\n\r\n                    {board.archives.groups.map(group => {\r\n                        return (\r\n                            <div className='group-preview' >\r\n\r\n                                <div>\r\n                                    <span className=\"group-menu-btn\" >...</span>\r\n                                    <p>{group.title}-Archives</p>\r\n                                </div>\r\n                                <div className={'card-list'} style={{ overflow: 'none' }} >\r\n                                    {group.cards.map((card) => {\r\n                                        return (\r\n                                            <div className='card-preview' style={card.style}   >\r\n                                                <div className=\"label-container\">\r\n                                                    {card.labels?.map((label, idx) => {\r\n                                                        return <div key={label?.id} className={`label is-close`} style={{ backgroundColor: label?.color }}>\r\n                                                        </div>\r\n                                                    })\r\n                                                    }\r\n                                                </div>\r\n                                                <div className={`edit-and-title`} >\r\n                                                    <div>\r\n                                                        <p>{card.title}</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n\r\n                                                <div className=\"card-icons \">\r\n                                                    <div className=\"card-icons-section1\">\r\n                                                        {card.description && <SubjectIcon />}\r\n                                                        {card.comments?.length > 0 && <ChatBubbleOutlineRoundedIcon />}\r\n                                                        {card.attachments?.length > 0 && <AttachFileRoundedIcon style={{ transform: \"rotate(35deg)\" }} />}\r\n                                                        {card.checklists?.length > 0 && <PlaylistAddCheckSharpIcon />}\r\n                                                    </div>\r\n                                                    {card.members?.length > 0 && <div className='members-container'>  {card.members.map(member => <MyAvatar user={member} />)} </div>}\r\n                                                </div>\r\n\r\n                                            </div>\r\n\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n\r\n\r\n                    <div className='group-preview' >\r\n\r\n                        <div>\r\n                            <span className=\"group-menu-btn\" >...</span>\r\n                            <p>Cards Archives</p>\r\n                        </div>\r\n\r\n                        <div className={'card-list'} style={{ overflow: 'none' }} >\r\n                            {board.archives.cards.map((card) => {\r\n                                return (\r\n                                    <div className='card-preview' style={card.style}   >\r\n                                        <div className=\"label-container\">\r\n                                            {card.labels.map((label, idx) => {\r\n                                                return <div key={label.id} className={`label is-close`} style={{ backgroundColor: label.color }}>\r\n                                                </div>\r\n                                            })\r\n                                            }\r\n                                        </div>\r\n                                        <div className={`edit-and-title`} >\r\n                                            <div>\r\n                                                <p>{card.title}</p>\r\n                                            </div>\r\n\r\n                                        </div>\r\n\r\n                                        <div className=\"card-icons \">\r\n                                            <div className=\"card-icons-section1\">\r\n                                                {card.description && <SubjectIcon />}\r\n                                                {card.comments?.length > 0 && <ChatBubbleOutlineRoundedIcon />}\r\n                                                {card.attachments?.length > 0 && <AttachFileRoundedIcon style={{ transform: \"rotate(35deg)\" }} />}\r\n                                                {card.checklists?.length > 0 && <PlaylistAddCheckSharpIcon />}\r\n                                            </div>\r\n                                            {card.members?.length > 0 && <div className='members-container'>  {card.members.map(member => <MyAvatar user={member} />)} </div>}\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddDueDateModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\DynamicCardActionModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardMenu.jsx",["441"],"import PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport WebIcon from '@material-ui/icons/Web';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport RemoveRedEyeOutlinedIcon from '@material-ui/icons/RemoveRedEyeOutlined';\r\nimport ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined';\r\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\n\r\nexport function CardMenu(props) {\r\n\r\n    function setModal(modal,ev){\r\n        ev.stopPropagation()\r\n        ev.preventDefault() \r\n        props.setCurrModal({name: modal})\r\n    }\r\n\r\n    return (\r\n        <div onClick={props.closeModal} className=\"card-action-menu flex col\">\r\n            <h5>ADD TO CARD</h5>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('members',ev)}><PersonOutlineIcon/> Members</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('labels', ev)}><LabelOutlinedIcon/> Labels</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('checklist', ev)}><PlaylistAddCheckIcon/> Checklist</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('dueDate', ev)}><AccessTimeIcon/> Due Date</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('attachment', ev)}><AttachFileIcon style={{transform: \"rotate(35deg)\"}}/> Attachment</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('cover', ev)}><WebIcon/> Cover</span>\r\n            <h5>ACTIONS</h5>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('move', ev)}><ArrowRightAltIcon/> Move</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('copy', ev)}><FileCopyOutlinedIcon/> Copy</span>\r\n            {/* <span className=\"flex align-center\" onClick={(ev) => setModal('watch', ev)}><RemoveRedEyeOutlinedIcon/> Watch</span> */}\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('archive', ev)}><ArchiveOutlinedIcon/> Archive</span>\r\n            <span className=\"flex align-center\" onClick={(ev) => setModal('share', ev)}><ShareOutlinedIcon/> Share</span>\r\n        </div>\r\n    )\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuActivitiesList.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionStickers.jsx",["442"],"import { Component } from 'react'\r\n\r\nimport stick1 from '../../../../assets/stickers/sticker-01.png'\r\nimport stick2 from '../../../../assets/stickers/sticker-02.png'\r\nimport stick3 from '../../../../assets/stickers/sticker-03.png'\r\nimport stick4 from '../../../../assets/stickers/sticker-04.png'\r\nimport stick5 from '../../../../assets/stickers/sticker-05.png'\r\nimport stick6 from '../../../../assets/stickers/sticker-06.png'\r\nimport stick7 from '../../../../assets/stickers/sticker-07.png'\r\nimport stick8 from '../../../../assets/stickers/sticker-08.png'\r\nimport stick9 from '../../../../assets/stickers/sticker-09.png'\r\nimport stick10 from '../../../../assets/stickers/sticker-10.png'\r\nimport stick11 from '../../../../assets/stickers/sticker-11.png'\r\nimport stick12 from '../../../../assets/stickers/sticker-12.png'\r\n\r\n\r\nexport class SectionStickers extends Component {\r\n\r\n    state = {\r\n        stickers: [\r\n            { src: stick1, _id: 'stick101' },\r\n            { src: stick2, _id: 'stick102' },\r\n            { src: stick3, _id: 'stick103' },\r\n            { src: stick4, _id: 'stick104' },\r\n            { src: stick5, _id: 'stick105' },\r\n            { src: stick6, _id: 'stick106' },\r\n            { src: stick7, _id: 'stick107' },\r\n            { src: stick8, _id: 'stick108' },\r\n            { src: stick9, _id: 'stick109' },\r\n            { src: stick10, _id: 'stick1011' },\r\n            { src: stick11, _id: 'stick1011' },\r\n            { src: stick12, _id: 'stick1012' }\r\n\r\n        ]\r\n    }\r\n\r\n\r\n    render() {\r\n        const { stickers } = this.state\r\n\r\n        console.log('stickers:', stickers);\r\n        if (!stickers || !stickers.length) return <h1>Loading...</h1>\r\n        return (\r\n            <section className=\"stickers-section\" style={{ display: \"grid\" }}>\r\n                <h1>Stickers!</h1>\r\n                <div className=\"stickers-area\">\r\n                    {stickers.map((sticker, idx) => {\r\n\r\n                        return <div className=\"sticker-img\" key={idx}>\r\n                            <img src={sticker.src} />\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </section >\r\n        )\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionLabels.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionSearch.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionAbout.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\SectionBackground.jsx",["443","444","445","446"],"import { Component } from 'react'\r\n\r\n//cmps:\r\nimport { PhotosArea } from './Backgrounds/PhotosArea.jsx'\r\nimport { ColorsArea } from './Backgrounds/ColorsArea.jsx';\r\n\r\n\r\n//icons:\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\n\r\n//imgs:\r\nimport photosSrc from '../../../../assets/bgImgs/photosChoose.jpg'\r\nimport colorsSrc from '../../../../assets/bgImgs/colorsChoose.jpg'\r\n\r\nexport class SectionBackground extends Component {\r\n\r\n    state = {\r\n        currType: null,\r\n        menuTitle: 'Change Background',\r\n        photosSrc,\r\n        colorsSrc\r\n    }\r\n\r\n    goBackBg = () => { this.setState({ currType: null }) }\r\n\r\n    choosePhotos = () => { this.setState({ menuTitle: \"Photos\", currType: 'PhotosArea' }) }\r\n    chooseColors = () => { this.setState({ menuTitle: \"Colors\", currType: 'ColorsArea' }) }\r\n\r\n    render() {\r\n        const { currType, photosSrc, colorsSrc } = this.state\r\n        return (\r\n            <section className=\"background-section\">\r\n                {currType === null && <section className=\"flex photos-colors\">\r\n                    <div className=\"photos\">\r\n                        <button onClick={this.choosePhotos}>\r\n                            <img src={photosSrc} className=\"img-select\" />\r\n                            <span className=\"select-img-title\">Photos</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"colors\">\r\n                        <button onClick={this.chooseColors}>\r\n                            <img src={colorsSrc} className=\"img-select\" />\r\n                            <span className=\"select-img-title\">Colors</span>\r\n                        </button>\r\n                    </div>\r\n                </section>}\r\n                {currType === null && <hr className=\"hr-menu\" />}\r\n                <DynamicCmpBg currType={currType} goBack={this.goBackBg} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\nfunction DynamicCmpBg({ currType, goBack }) {\r\n    switch (currType) {\r\n        case 'PhotosArea':\r\n            return <PhotosArea goBack={goBack} />\r\n        case 'ColorsArea':\r\n            return <ColorsArea goBack={goBack} />\r\n        default:\r\n            return <h1></h1>\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardCommentPreview.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\AddMembersModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupPreview.jsx",["447","448","449","450","451"],"import React, { Component } from 'react'\r\nimport { CardList } from \"./CardList\";\r\nimport { connect } from 'react-redux'\r\nimport { loadCards } from '../store/actions/cardActions'\r\nimport { addCard, openLabel, editGroupTitle, copyList, onArchiveList } from '../store/actions/boardAction'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport { GroupMenu } from './GroupMenu';\r\nimport { AddCardInput } from './AddCardInput';\r\nimport { DynamicCardActionModal } from './card/DynamicCardActionModal';\r\nimport { DynamicGroupModal } from './DynamicGroupModal';\r\nimport { Transform } from '@material-ui/icons';\r\nimport img from '../templates/templatesBg/falafel-bg.png'\r\n\r\n\r\nexport class _GroupPreview extends Component {\r\n\r\n    state = {\r\n        isModalOpen: false,\r\n        modalName: '',\r\n        groupTitle: '',\r\n        card: {\r\n            createdBy: {},\r\n            title: '',\r\n            description: '',\r\n            dueDate: '',\r\n            style: {},\r\n            comments: [],\r\n            checklists: [],\r\n            attachments: [],\r\n            members: [],\r\n            labels: []\r\n        },\r\n        isAdding: false,\r\n        isChangeTitle: false,\r\n        isMenuOpen: false,\r\n        isAddingToTop: false,\r\n        topTitle: '',\r\n        isInputDisabled:true\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const { group } = this.props\r\n        this.props.loadCards(group)\r\n        this.setState({ groupTitle: group.title })\r\n    }\r\n\r\n    openTitleBtn = () => {\r\n        this.setState({ isChangeTitle: true,isInputDisabled:false })\r\n        this.setState({isInputDisabled:false})\r\n\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        const { card } = this.state\r\n        const { value } = ev.target\r\n        this.setState({\r\n            card: { ...card, title: value }\r\n        })\r\n    }\r\n    onAddCard = async (ev) => {\r\n        const { card, isAddingToTop } = this.state\r\n        const { board, group } = this.props\r\n        if (card.title.length === 0) return\r\n        this.props.addCard(board, group, card, isAddingToTop)\r\n        this.setState({\r\n            card: {\r\n                createdBy: {},\r\n                id: '',\r\n                title: '',\r\n                description: '',\r\n                createdAt: '',\r\n                dueDate: '',\r\n                style: {},\r\n                comments: [],\r\n                checklists: [],\r\n                attachments: [],\r\n                members: [],\r\n                labels: []\r\n            },\r\n            isAdding: false,\r\n            isAddingToTop: false\r\n        })\r\n    }\r\n\r\n\r\n    handleEditGroupTitle = (ev) => {\r\n        const { value } = ev.target\r\n        console.log(value);\r\n\r\n        this.setState({ groupTitle: value })\r\n    }\r\n\r\n    discardChanges = (ev) => {\r\n        this.setState({\r\n            card: { ...this.state.card, title: '' },\r\n            isInputDisabled:true\r\n        })\r\n        ev.currentTarget.blur()\r\n    }\r\n\r\n    editGroupTitle = (ev) => {\r\n        if (ev.key && ev.key !== 'Enter') return\r\n        ev.preventDefault()\r\n        const { board, group } = this.props\r\n        const { groupTitle } = this.state\r\n        this.props.editGroupTitle(board, group, groupTitle)\r\n        this.setState({ isChangeTitle: false,isInputDisabled:true })\r\n        \r\n        ev.currentTarget.blur()\r\n    }\r\n    handleEnter = (ev) => {\r\n        if (ev.key === 'Enter') {\r\n            ev.preventDefault()\r\n            ev.currentTarget?.blur()\r\n            this.onAddCard()\r\n        }\r\n    }\r\n    toggleMenu = () => {\r\n        const { isMenuOpen } = this.state\r\n        this.setState({ isMenuOpen: !isMenuOpen })\r\n\r\n    }\r\n    openInput = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        this.setState({ isAddingToTop: true, isMenuOpen: false })\r\n    }\r\n\r\n    copyList = () => {\r\n        const { group, board } = this.props\r\n        this.props.copyList(board, group)\r\n        this.setState({ isMenuOpen: false })\r\n    }\r\n\r\n    closeMenu = () => {\r\n        const { isMenuOpen } = this.state\r\n        if (isMenuOpen) this.setState({ isMenuOpen: false })\r\n    }\r\n\r\n    onArchive = () => {\r\n        const { board, group } = this.props\r\n        this.props.onArchiveList(board, group)\r\n\r\n    }\r\n\r\n    openDynamicModal = (modalName) => {\r\n        this.setState({\r\n            modalName,\r\n            isMenuOpen: false,\r\n            isModalOpen: true\r\n        })\r\n\r\n    }\r\n    closeModal = () => {\r\n        this.setState({ isModalOpen: false })\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { listId, idx, group, board, isLabelOpen, openLabel, updateCardsLocation, isEdit, enterEditMode, exitEditMode } = this.props\r\n        const { cards } = group\r\n        const { groupTitle, isChangeTitle, isMenuOpen, isAddingToTop, isModalOpen, modalName,isInputDisabled } = this.state\r\n        const { title } = this.state.card\r\n        return (\r\n            <Draggable draggableId={listId} index={idx} >\r\n                {(provided, snapshot) => (\r\n\r\n\r\n                        \r\n                        <div className={(snapshot.isDragging) ? 'group-preview dragging' : 'group-preview'} onClick={this.closeMenu} ref={provided.innerRef} {...provided.draggableProps} >\r\n                            <div {...provided.dragHandleProps} listId={listId} className='draggble-headline' >\r\n\r\n                                <span className=\"group-menu-btn\" onClick={this.toggleMenu} >...</span>\r\n\r\n                                {isMenuOpen && <GroupMenu closeMenu={this.closeMenu} openDynamicModal={this.openDynamicModal} onArchive={this.onArchive} openInput={this.openInput} copyList={this.copyList} />}\r\n                                {isModalOpen && <DynamicGroupModal closeModal={this.closeModal} group={group} modalName={modalName} />}\r\n\r\n                                <div className={`hidden-actions-form-container`}>\r\n                                    <form className={`hidden-actions-form`}>\r\n                                    { isInputDisabled&&<p onDoubleClick={this.openTitleBtn} className=\"group-title-input\"> {groupTitle}</p>}\r\n                                     { !isInputDisabled&&   <input onClick={this.editGroupTitle} className=\"group-title-input\" autoFocus  onKeyUp={this.editGroupTitle} onChange={this.handleEditGroupTitle} type=\"text\" value={groupTitle} autoComplete=\"off\" />}\r\n                                    </form>\r\n                                    {isChangeTitle && <div className=\"hidden-actions flex\" style={{ marginLeft: '0' }}>\r\n                                        <button type=\"button\" onClick={this.editGroupTitle}  > save </button>\r\n                                        <button onClick={this.discardChanges} className=\"icon\"><CloseSharpIcon /></button>\r\n                                    </div>}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {isAddingToTop && <AddCardInput isAddingToTop={isAddingToTop} title={title} onShowAddBtn={this.onShowAddBtn} handleEnter={this.handleEnter} onAddCard={this.onAddCard} discardChanges={this.discardChanges} handleChange={this.handleChange} />}\r\n                            <CardList isDragging={snapshot.isDragging} exitEditMode={exitEditMode} enterEditMode={enterEditMode} isEdit={isEdit} listId={listId} cards={cards} board={board} updateCardsLocation={updateCardsLocation} isLabelOpen={isLabelOpen} openLabel={openLabel} currGroup={group} />\r\n                            {!isAddingToTop && <AddCardInput isAddingToTop={isAddingToTop} title={title} onShowAddBtn={this.onShowAddBtn} handleEnter={this.handleEnter} onAddCard={this.onAddCard} discardChanges={this.discardChanges} handleChange={this.handleChange} />}\r\n\r\n\r\n                        </div>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        reviews: state.reviewModule.reviews,\r\n        cards: state.cardModule.cards,\r\n        board: state.boardModule.board,\r\n        isLabelOpen: state.boardModule.isLabelOpen\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadCards,\r\n    addCard,\r\n    openLabel,\r\n    copyList,\r\n    editGroupTitle,\r\n    onArchiveList\r\n}\r\n\r\nexport const GroupPreview = connect(mapStateToProps, mapDispatchToProps)(_GroupPreview)\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardContent.jsx",["452"],"import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { CardAttachmentList } from \"./CardAttachmentList\";\r\nimport { CardChecklistList } from \"./CardChecklistList\";\r\nimport { CardCommentList } from \"./CardCommentList\";\r\nimport { CardDescription } from \"./CardDescription\";\r\nimport { LabelList } from \"./LabelList\";\r\nimport { MemberList } from \"./MemberList\";\r\n\r\nclass _CardContent extends Component {\r\n\r\n    render() { \r\n        const {card, save, user, board} = this.props\r\n        return <div onClick={this.props.closeModal} className=\"card-content\">\r\n            <div className=\"flex wrap\">\r\n            <MemberList setCurrModal={this.props.setCurrModal} card={card}/>\r\n            <LabelList setCurrModal={this.props.setCurrModal} card={card}/>\r\n            </div>\r\n            <CardDescription card={card} user={user} save={save}/>\r\n            <CardChecklistList card={card} user={user} save={save}/>\r\n            <CardAttachmentList setCurrModal={this.props.setCurrModal} card={card}/>\r\n            <CardCommentList card={card} user={user} save={save}/>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n}\r\n\r\nexport const CardContent = connect(mapStateToProps, mapDispatchToProps)(_CardContent)\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\menuAction.js",["453"],"import { boardService } from '../../services/boardService.js'\r\nimport { menuService } from '../../services/menuService.js'\r\n\r\nexport function setFilter(filterBy) {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'FILTER_PHOTOS',\r\n            filterBy\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function saveBoardDesc(board, description) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedBoard = await boardService.updateBoardDesc(board, description)\r\n            dispatch({ type: 'SET_BOARD', board: updatedBoard })\r\n        }\r\n        catch (err) {\r\n            console.log('boardActions: err:', err);\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\MenuActivity.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\Backgrounds\\ColorsArea.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\Backgrounds\\PhotosArea.jsx",["454"],"import { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n// import {menuService} from '../'\r\n//icons:\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\n//functions:\r\nimport { setBackground } from '../../../../../store/actions/boardAction.js'\r\nimport { setFilter } from '../../../../../store/actions/menuAction.js'\r\n\r\n//imgs:\r\nimport src1 from '../../../../../assets/bgImgs/image-01.jpg'\r\nimport src2 from '../../../../../assets/bgImgs/image-02.jpg'\r\nimport src3 from '../../../../../assets/bgImgs/image-03.jpg'\r\nimport src4 from '../../../../../assets/bgImgs/image-04.jpg'\r\nimport src5 from '../../../../../assets/bgImgs/image-05.jpg'\r\nimport src6 from '../../../../../assets/bgImgs/image-06.jpg'\r\nimport src7 from '../../../../../assets/bgImgs/image-07.jpg'\r\nimport src8 from '../../../../../assets/bgImgs/image-08.jpg'\r\nimport src9 from '../../../../../assets/bgImgs/image-09.jpg'\r\nimport src10 from '../../../../../assets/bgImgs/image-10.jpg'\r\nimport src11 from '../../../../../assets/bgImgs/image-11.jpg'\r\nimport src12 from '../../../../../assets/bgImgs/image-12.jpg'\r\nimport src13 from '../../../../../assets/bgImgs/image-13.jpg'\r\nimport src14 from '../../../../../assets/bgImgs/image-14.jpg'\r\nimport src15 from '../../../../../assets/bgImgs/image-15.jpg'\r\nimport src16 from '../../../../../assets/bgImgs/image-16.jpg'\r\nimport src17 from '../../../../../assets/bgImgs/image-17.jpg'\r\nimport src18 from '../../../../../assets/bgImgs/image-18.jpg'\r\n\r\nclass _PhotosArea extends Component {\r\n\r\n    state = {\r\n        photoSearch: '',\r\n        filter: '',\r\n        bgImgs: [\r\n            { src: src1, _id: 'img101', title: \"sunset\", isImgTitleShow: false },\r\n            { src: src2, _id: 'img102', title: \"Snowy mountains\", isImgTitleShow: false },\r\n            { src: src3, _id: 'img103', title: \"Mountains at sunset\", isImgTitleShow: false },\r\n            { src: src4, _id: 'img104', title: \"clouds\", isImgTitleShow: false },\r\n            { src: src5, _id: 'img105', title: \"Cliff on a stream\", isImgTitleShow: false },\r\n            { src: src6, _id: 'img106', title: \"Stars\", isImgTitleShow: false },\r\n            { src: src7, _id: 'img107', title: \"Bright background\", isImgTitleShow: false },\r\n            { src: src8, _id: 'img108', title: \"Wall painting\", isImgTitleShow: false },\r\n            { src: src9, _id: 'img109', title: \"Snowy village\", isImgTitleShow: false },\r\n            { src: src10, _id: 'img110', title: \"stream\", isImgTitleShow: false },\r\n            { src: src11, _id: 'img111', title: \"Desert\", isImgTitleShow: false },\r\n            { src: src12, _id: 'img112', title: \"A flowering tree\", isImgTitleShow: false },\r\n            { src: src13, _id: 'img113', title: \"Cherries\", isImgTitleShow: false },\r\n            { src: src14, _id: 'img114', title: \"Tree leaves\", isImgTitleShow: false },\r\n            { src: src15, _id: 'img115', title: \"Orange tree\", isImgTitleShow: false },\r\n            { src: src16, _id: 'img116', title: \"Tangled stream\", isImgTitleShow: false },\r\n            { src: src17, _id: 'img117', title: \"Cloudy mountains\", isImgTitleShow: false },\r\n            { src: src18, _id: 'img118', title: \"Rear passage\", isImgTitleShow: false }\r\n        ]\r\n    }\r\n    componentDidMount() {\r\n        // console.log(this.state.bgImgs[0]);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [field]: value } }), () => {\r\n            this.props.setFilter(this.state.filterBy)\r\n        })\r\n    }\r\n\r\n    toggleImgTitle = (imgIdx) => {\r\n        let bgImgs = this.state.bgImgs.map((img, idx) => {\r\n            return (imgIdx !== idx) ? img : { ...img, isImgTitleShow: !img.isImgTitleShow }\r\n        })\r\n        this.setState({ bgImgs })\r\n    }\r\n\r\n    selectImg = (imgSrc) => { this.props.setBackground(this.props.board, { backgroundImage: `url(${imgSrc})` }) }\r\n\r\n    get imgs() {\r\n        const { bgImgs, filter } = this.state\r\n        const regex = new RegExp(filter, 'i')\r\n        return bgImgs.filter(img => regex.test(img.title))\r\n    }\r\n\r\n    render() {\r\n        const imgs = this.imgs\r\n        if (!imgs || !imgs.length) return <h1>Loading...</h1>\r\n        return (\r\n            <section className=\"photo-type\">\r\n                <div className=\"flex search-photo\">\r\n                    <SearchIcon /><input type=\"text\"\r\n                        name=\"filter\"\r\n                        onChange={({ target }) => this.setState({ filter: target.value })}\r\n                        placeholder=\"Photos\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                    />\r\n                </div>\r\n                <div className=\"photos-area\">\r\n                    {this.imgs.map((img, idx) => {\r\n                        return <div className=\"bgImg\" key={img._id} onMouseOver={() => { this.toggleImgTitle(idx) }}\r\n                            onMouseOut={() => { this.toggleImgTitle(idx) }}\r\n                            onClick={() => { this.selectImg(img.src) }}>\r\n                            <img src={img.src} />\r\n                            {img.isImgTitleShow && <span className=\"img-title\">{img.title}</span>}\r\n                        </div>\r\n                    })}\r\n                </div>\r\n                <span className=\"go-back\" onClick={this.props.goBack}>Go back to backgrounds</span>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.boardModule.board,\r\n        filterBy: state.menuModule.filterBy\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setBackground,\r\n    setFilter\r\n}\r\nexport const PhotosArea = connect(mapStateToProps, mapDispatchToProps)(_PhotosArea)\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\services\\menuService.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\ShareCardModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\menuSearchBy\\UserSearchBy.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\menu\\menuFirstSee\\menuTopOptions\\menuSearchBy\\LabelSearchBy.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\store\\actions\\cardActions.js",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\TimeDisplay.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MemberList.jsx",["455","456"],"import React, { Component } from \"react\";\r\nimport { MyAvatar } from \"../MyAvatar\";\r\nimport { MemberListModal } from \"./MemberListModal\";\r\n\r\n\r\nexport function MemberList(props) {\r\n    const containerRef = React.createRef()\r\n\r\n    function openModal(ev) {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const div = containerRef.current\r\n        const top = div.offsetTop + 50 + div.offsetParent.offsetTop\r\n        const left = ev.target.offsetLeft + ev.target.offsetParent.offsetLeft\r\n        props.setCurrModal({ name: 'members', style: { top , left} })\r\n    }\r\n    const { card } = props\r\n\r\n    return (\r\n        <div className=\"card-members\">\r\n            <h5>MEMBERS</h5>\r\n            <div ref={containerRef} className=\"card-members flex\">\r\n                {card.members.map(user => <div onClick={openModal}><MyAvatar key={Math.random()} user={user} /></div>)}\r\n                <div onClick={openModal} className=\"add-user-button\">\r\n                    <MyAvatar user={{ fullname: '+' }} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardDescription.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\LabelList.jsx",["457"],"import React, { Component } from \"react\";\r\n\r\nexport function LabelList(props) {\r\n\r\n    const containerRef = React.createRef()\r\n\r\n    function openModal(ev) {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const div = containerRef.current\r\n        const top = div.offsetTop + 50 + div.offsetParent.offsetTop\r\n        const left = ev.target.offsetLeft + ev.target.offsetParent.offsetLeft\r\n        props.setCurrModal({ name: 'labels', style: { top, left } })\r\n    }\r\n\r\n    const { card } = props\r\n    return (\r\n        <div className=\"card-labels\">\r\n            <h5>LABELS</h5> \r\n            <div className=\"label-container flex\" ref={containerRef}>\r\n                {card.labels.map(label =>\r\n                    <div onClick={openModal} key={label.id} className={`label flex center`} style={{ backgroundColor: label.color }}>\r\n                        {label.title}\r\n                    </div>\r\n                )}\r\n                <div onClick={openModal} className=\"add-label flex center\">+</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardChecklistList.jsx",["458","459"],"import { DragDropContext, Droppable } from \"react-beautiful-dnd\"\r\nimport { connect } from \"react-redux\"\r\nimport { cardService } from \"../../services/cardService\"\r\nimport { handleTodoDrag } from \"../../store/actions/boardAction\"\r\nimport { CardChecklist } from \"./CardChecklist\"\r\n\r\nexport function CardChecklistList(props) {\r\n    const { card, board } = props\r\n\r\n    async function updateChecklist(checklist, todo) {\r\n        let newCard = await cardService.updateChecklistTodo(card, checklist, todo)\r\n        props.save(newCard, `Edited ${checklist.title} checklist`)\r\n    }\r\n\r\n    async function onRemoveChecklist(checklist) {\r\n        let newCard = await cardService.removeChecklist(card, checklist)\r\n        props.save(newCard, `removed ${checklist.title} checklist`)\r\n    }\r\n\r\n    function handleDrag(res) {\r\n            const newCard =  cardService.handleTodoDrag(board, card, res) \r\n            props.save(newCard,null)\r\n        \r\n    }\r\n\r\n    const { checklists } = card\r\n    return (\r\n\r\n        <DragDropContext onDragEnd={handleDrag}>\r\n            <Droppable droppableId=\"checklistList\" type=\"cheklist\" direction=\"vertical\">\r\n                {provided => (\r\n\r\n                    <div ref={provided.innerRef} {...provided.droppableProps} className=\"\">\r\n                        {checklists.map((checklist, idx) => <CardChecklist key={checklist.id} removeChecklist={() => onRemoveChecklist(checklist)} saveTodo={updateChecklist} checklist={checklist} idx={idx} checklistId={checklist.id} />)}\r\n                        {provided.placeholder}\r\n\r\n\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardCommentList.jsx",["460"],"import { Component } from \"react\"\r\nimport { utilService } from \"../../services/utilService\"\r\nimport { CardCommentPreview } from \"./CardCommentPreview\"\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport { cardService } from \"../../services/cardService\";\r\n\r\nexport class CardCommentList extends Component {\r\n\r\n    state = {\r\n        newCommentTxt: '',\r\n        isShown: false\r\n\r\n    }\r\n\r\n    showActivities = () => {\r\n        this.setState({ isShown: !this.state.isShown })\r\n    }\r\n\r\n\r\n    onInput = ({ target }) => {\r\n        const { name, value } = target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    onAddComment = (ev) => {\r\n        if (ev?.key && ev.key === \"Enter\") return\r\n        ev.preventDefault()\r\n        ev.currentTarget.blur()\r\n        const { card, user } = this.props\r\n        const txt = this.state.newCommentTxt\r\n        const comment = cardService.getCommentToAdd(txt, user)\r\n        const newCard = { ...card }\r\n        newCard.comments.unshift(comment)\r\n        this.props.save(newCard)\r\n        this.setState({ newCommentTxt: '' })\r\n    }\r\n\r\n    get data() {\r\n        const { comments, activities } = this.props.card\r\n        if (!this.state.isShown) return comments\r\n        else {\r\n            const data = [...comments, ...activities]\r\n            return data.sort((a, b) => b.createdAt - a.createdAt)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isShown } = this.state\r\n        return <div className=\"card-comments\">\r\n            <header className=\"in-card-section flex space-bt align-end\">\r\n                <div className=\"flex align-start\">\r\n                    <FormatListBulletedIcon />\r\n                    <h3>Activity</h3>\r\n                </div>\r\n                <button onClick={this.showActivities}>{isShown ? 'Hide' : 'Show'} Details</button>\r\n            </header>\r\n            <div className={`hidden-actions-form-container`}>\r\n                <form onSubmit={(ev => ev.preventDefault())} className={`hidden-actions-form`}>\r\n                    <textarea\r\n                        type=\"text\"\r\n                        onChange={this.onInput}\r\n                        value={this.state.newCommentTxt}\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Write a comment..\"\r\n                        name=\"newCommentTxt\"\r\n                    />\r\n                </form>\r\n                <div className=\"hidden-actions flex\">\r\n                    <button type=\"button\"\r\n                        className={this.state.newCommentTxt ? '' : 'disabled'}\r\n                        onClick={this.onAddComment}\r\n                    >\r\n                        Save\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n            <CardCommentPreview data={this.data} />\r\n        </div>\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\DynamicGroupModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\AddCardInput.jsx",["461"],"import CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport React, { Component } from 'react'\r\n\r\nexport class AddCardInput extends Component {\r\n\r\n    render() {\r\n\r\n        const {title,onShowAddBtn,handleEnter,onAddCard,discardChanges,handleChange,isAddingToTop} =this.props\r\n        \r\n        return (\r\n\r\n            <div className=\"hidden-actions-form-container\">\r\n                <form action=\"\" className=\"hidden-actions-form\" >\r\n                    <input  onClick={onShowAddBtn} onKeyDown={handleEnter}  value ={title}  type=\"text\" placeholder=\"+ Add another card \" onChange={handleChange} />\r\n                </form> \r\n                {/* className=\"add-card-input-bottom\" */}\r\n\r\n                <div className=\"hidden-actions flex\" style={{margin:'0'}}>\r\n                    <button  onClick={onAddCard}> Add Card</button>\r\n                    <button onClick={discardChanges} className=\"icon\">\r\n                        <CloseSharpIcon />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupMenu.jsx",["462","463"],"import React, { Component } from 'react'\r\nimport {DynamicGroupModal} from '../cmps/DynamicGroupModal'\r\n\r\nexport class GroupMenu extends Component {\r\n\r\n\r\n    state={\r\n        currModal:{\r\n            name:''\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.modalRef = React.createRef();\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        const { openInput, copyList, onArchive,openDynamicModal,closeMenu } = this.props\r\n        const {currModal}=this.state\r\n        return (\r\n            <div className=\"menu-screen\" onClick={()=>closeMenu}>\r\n\r\n            <div className=\"group-menu\">\r\n                <div className=\"group-menu-header\"> list actions</div>\r\n                <hr />\r\n                <div className=\"first-section\">\r\n                    <span className='item' onClick={openInput}>add card...</span>\r\n                    <span className='item' onClick={copyList}>copy list...</span>\r\n                        <span  className='item' onClick={()=>openDynamicModal('move')}> move list...</span>\r\n\r\n\r\n\r\n                    <span className='item'>watch</span>\r\n                </div>\r\n                <hr />\r\n                <div className=\"item\" onClick={()=>openDynamicModal('sort')}>sort by</div>\r\n                <hr />\r\n                <div className=\"first-section\">\r\n                    <span className='item' > move all cards in this list...</span>\r\n                    <span className='item'> archive all cards in this list</span>\r\n                </div>\r\n                <hr />\r\n                <div className=\"item\" onClick={onArchive}>archive this list</div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardAttachmentList.jsx",["464","465"],"import React, { Component } from \"react\"\r\nimport { utilService } from \"../../services/utilService\";\r\nimport AttachFileRoundedIcon from '@material-ui/icons/AttachFileRounded';\r\nimport CallMadeOutlinedIcon from '@material-ui/icons/CallMadeOutlined';\r\nimport { CallReceived } from \"@material-ui/icons\";\r\n\r\nexport class CardAttachmentList extends Component {\r\n\r\n    onAddAtach = (ev) => {\r\n        console.log(ev.key);\r\n        ev.preventDefault()\r\n        const { card } = this.props\r\n        const txt = this.state.newCommentTxt\r\n        const comment = { txt, createdAt: Date.now(), createdBy: {}, id: utilService.makeId() }\r\n        const newCard = { ...card }\r\n        newCard.comments.unshift(comment)\r\n    }\r\n\r\n    openModal = (ev) => {\r\n        const top = ev.target.offsetTop\r\n        this.props.setCurrModal({name: 'attachment', style: {left: 'calc(50% - 336px)', top, transform: 'translateY(-80%)'}})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { attachments } = this.props.card\r\n        if (!attachments) return null\r\n        return <div className=\"attachments\">\r\n            <header className=\"flex\">\r\n                <AttachFileRoundedIcon style={{ transform: \"rotate(35deg)\" }} />\r\n                <h3>Attachments</h3>\r\n            </header>\r\n            {attachments.map(att =>\r\n                <a onClick={() => window.open(att.url, \"_blank\")} key={att.id} >\r\n                    <div className=\"attachment flex align-center\">\r\n                        <div>LINK</div>\r\n                        <div className=\"flex align-start\">\r\n                            <h4>{att.title || att.url}</h4>\r\n                            <CallMadeOutlinedIcon />\r\n                        </div>\r\n                    </div>\r\n                </a>\r\n            )}\r\n            <button onClick={this.openModal}>Add an attachment</button>\r\n        </div>\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardList.jsx",["466","467","468","469"],"import React, { Component } from 'react'\r\nimport { CardPreview } from \"./CardPreview\";\r\n// ////React DND///\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\n\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\n\r\n\r\nexport class CardList extends Component {\r\n    state = {\r\n        cards: []\r\n    }\r\n    componentDidMount() {\r\n        const { cards } = this.props\r\n        this.setState({ cards })\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            const { cards } = this.props\r\n            this.setState({ cards })\r\n        }\r\n    }\r\n\r\n    handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const { board, currGroup } = this.props\r\n        // const { cards } = this.props\r\n        const { cards } = this.state\r\n        const items = Array.from(cards)\r\n        const [reorderedItem] = items.splice(result.source.index, 1)\r\n        items.splice(result.destination.index, 0, reorderedItem)\r\n        this.setState({ cards: items })\r\n        this.props.updateCardsLocation(board, currGroup, items)\r\n    }\r\n\r\n    render() {\r\n        const { board, cards, listId, isLabelOpen, openLabel, currGroup, isEdit, exitEditMode, enterEditMode } = this.props\r\n        return (\r\n            <Droppable droppableId={listId} type=\"CARD\">\r\n                {(droppableProvided) => (\r\n\r\n                    <div className={'card-list'} ref={droppableProvided.innerRef} style={{overflow:'none'}} >\r\n                        <div style={{height: '1px'}}></div>\r\n                        {cards.map((card, idx) => {\r\n                            if (card) {\r\n\r\n                                return (\r\n                                        <CardPreview exitEditMode={exitEditMode} enterEditMode={enterEditMode} isEdit={isEdit} currGroup={currGroup} key={card.id} listId={listId} board={board} idx={idx} card={card} isLabelOpen={isLabelOpen} openLabel={openLabel} />\r\n                                )\r\n                            }\r\n\r\n                        })}\r\n                        {droppableProvided.placeholder}\r\n\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        )\r\n    }\r\n\r\n}\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CardChecklist.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MemberListModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupModals\\SortGroupModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\GroupModals\\MoveGroupModal.jsx",["470","471"],"import { TableCell } from '@material-ui/core';\r\nimport React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { boardService } from '../../services/boardService'\r\n\r\n\r\n\r\nexport class MoveGroupModal extends Component {\r\n\r\n    state = {\r\n        destinationBoard: null,\r\n        position: 0,\r\n    }\r\n\r\n    handleBoardSelect = async (ev) => {\r\n        const { value, name } = ev.target\r\n        if (name === 'board' && value.length > 5) {\r\n            const board = await boardService.getById(value)\r\n            this.setState({ destinationBoard: board })\r\n        }\r\n        if (name === 'position') {\r\n            this.setState({ position: value })\r\n        }\r\n    }\r\n    moveGroup = () => {\r\n        const { destinationBoard, position } = this.state\r\n        const {boards, group, moveGroup, board,closeModal } = this.props\r\n        moveGroup(boards,board, group, destinationBoard, position)\r\n        closeModal()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { boards } = this.props\r\n        const { destinationBoard } = this.state\r\n        return (\r\n            <div className=\"group-menu sort\" style={{ height: '220px' }} >\r\n                <div className=\"flex justify-center\">\r\n                    Move group\r\n                </div>\r\n\r\n                <hr />\r\n                <div >\r\n                    <div style={{ backgroundColor: 'rgba(9,30,66,.04)', borderRadius: '3px', padding: '4px', color: 'black' }}>\r\n\r\n                        <label htmlFor=\"\">board</label>\r\n                        <select className=\"move-select-btn\" onChange={this.handleBoardSelect} name=\"board\">\r\n                            <option value=\"\">board</option>\r\n                            {boards ? boards.map(board => <option value={board._id} >{board.title} </option>) : <option>  board</option>}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div style={{ backgroundColor: 'rgba(9,30,66,.04)', borderRadius: '3px', padding: '4px', color: 'black' }}>\r\n                        <label htmlFor=\"\">positon</label>\r\n                        <select className=\"move-select-btn\" onChange={this.handleBoardSelect} name=\"position\">\r\n                            {destinationBoard ? destinationBoard.groups.map((group, idx) => <option value={idx} >{idx}</option>) : <option>  0</option>}\r\n                        </select>\r\n                    </div>\r\n\r\n                </div>\r\n                <button className=\"green\" style={{ backgroundColor: '#5aac44', color: 'white' }} onClick={this.moveGroup} >Move</button>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardPreview.jsx",["472","473","474"],"import React, { Component } from 'react'\r\nimport { cardService } from \"../services/cardService\";\r\nimport { connect } from 'react-redux'\r\nimport { updateBoardCard, copyList, onArchiveCard } from '../store/actions/boardAction'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { CardDetails } from './CardDetails';\r\nimport { CardEdit } from './CardEdit';\r\n\r\n\r\n\r\n\r\n\r\nclass _CardPreview extends Component {\r\n\r\n    state = {\r\n        isModalOpen: false,\r\n        // labels: [],\r\n        isEdit: false,\r\n        title: '',\r\n        card: null,\r\n        editStyle: {}\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const { card, board, isModalOpen } = this.props\r\n        const updatedCard = cardService.getCardById(board, card.id)\r\n        // const labels = cardService.getCardLabels(board, card.labels)\r\n        this.setState({\r\n            card: updatedCard,\r\n            title: card.title\r\n        })\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        const { card, board } = this.props\r\n        const updatedCard = cardService.getCardById(board, card.id)\r\n        if (prevProps !== this.props) {\r\n            this.setState({ card: updatedCard })\r\n\r\n        }\r\n    }\r\n\r\n    onOpenLabel = (ev) => {\r\n        ev.preventDefault()\r\n        this.props.openLabel()\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        const { value } = ev.target\r\n        this.setState({ title: value })\r\n    }\r\n\r\n    onSave = (ev) => {\r\n        const { card, board } = this.props\r\n        const { title } = this.state\r\n        card.title = title\r\n        console.log(card);\r\n        this.props.updateBoardCard(board, card)\r\n        this.props.exitEditMode(ev)\r\n        this.setState({ isEdit: false })\r\n    }\r\n\r\n    copyList = () => {\r\n        const { currGroup, board } = this.props\r\n        this.props.copyList(board, currGroup)\r\n    }\r\n\r\n    onArchiveCard = () => {\r\n        const { board, currGroup } = this.props\r\n        const { card } = this.state\r\n        this.props.onArchiveCard(board, currGroup, card)\r\n\r\n    }\r\n\r\n    enterEditMode = (cardId, editStyle) => {\r\n        this.setState({editStyle})\r\n        this.props.enterEditMode(cardId)\r\n    }\r\n\r\n    render() {\r\n        const { board, idx, isLabelOpen, currGroup, isEdit, exitEditMode, updateBoardCard, loggedUser } = this.props\r\n\r\n        const { title, card, editStyle } = this.state\r\n        if (!this.state.card) return <h1> loading</h1>\r\n        const { labels } = this.state.card\r\n        return (\r\n            <React.Fragment>\r\n                {isEdit && (isEdit.id === card.id) ? <CardEdit style={editStyle} onArchiveCard={this.onArchiveCard} copyList={this.copyList} loggedUser={loggedUser} updateBoardCard={updateBoardCard} exitEditMode={exitEditMode} onSave={this.onSave} currGroup={currGroup} isEdit={isEdit.isOpen} onOpenLabel={this.onOpenLabel} handleChange={this.handleChange} enterEditMode={this.enterEditMode} labels={labels} isLabelOpen={isLabelOpen} board={board} card={card} title={title} /> : ''}\r\n                <Draggable\r\n                    draggableId={card.id}\r\n                    index={idx}\r\n                >\r\n                    {(draggbleProvided, snapshot) => (\r\n                        <div ref={draggbleProvided.innerRef}\r\n                            {...draggbleProvided.draggableProps}\r\n                            {...draggbleProvided.dragHandleProps}>\r\n                                {<CardDetails isDragging={snapshot.isDragging} isEdit={isEdit.isOpen} onOpenLabel={this.onOpenLabel} handleChange={this.handleChange} enterEditMode={this.enterEditMode} labels={labels} isLabelOpen={isLabelOpen} board={board} card={card} title={title} />}\r\n                        </div>\r\n\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        reviews: state.reviewModule.reviews,\r\n        cards: state.cardModule.cards,\r\n        board: state.boardModule.board,\r\n        loggedUser: state.userModule.loggedUser,\r\n        isLabelOpen: state.boardModule.isLabelOpen\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    updateBoardCard,\r\n    copyList,\r\n    onArchiveCard\r\n\r\n}\r\n\r\nexport const CardPreview = connect(mapStateToProps, mapDispatchToProps)(_CardPreview)\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\Todo.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\LinearProgressBar.jsx",[],["475","476"],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardEdit.jsx",["477","478","479","480"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\r\nimport AttachFileRoundedIcon from '@material-ui/icons/AttachFileRounded';\r\nimport PlaylistAddCheckSharpIcon from \"@material-ui/icons/PlaylistAddCheckSharp\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined';\r\nimport { Archive } from '@material-ui/icons';\r\nimport { DynamicCardActionModal } from \"./card/DynamicCardActionModal\";\r\nimport { cardService } from '../services/cardService'\r\n\r\n\r\n\r\n\r\nexport class CardEdit extends Component {\r\n    state = {\r\n        isModalOpen: false,\r\n        currModal: {\r\n            name: '',\r\n            style: {\r\n                position: 'absolute',\r\n                left: '257px',\r\n                'z-index': '20'\r\n            }\r\n        },\r\n        style: {}\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        const { currGroup, board } = this.props\r\n        const idx = board.groups.findIndex(group => group.id === currGroup.id)\r\n        const pos = idx + 1\r\n        const finalPos = 266 * pos\r\n        this.setState({\r\n            // currModal:{...this.state.currModal, style:{...this.state.currModal.style,left:`${finalPos}px`}}\r\n        })\r\n        this.findCardPos()\r\n    }\r\n\r\n\r\n\r\n    findCardPos = () => {\r\n        const { editPos } = this.state\r\n        const { currGroup, card } = this.props\r\n        const idx = currGroup.cards.findIndex(groupCard => groupCard.id === card.id)\r\n        var pos = editPos * idx\r\n        // if(card.labels.length>0 || card.comments.length>0||card.description.length>0) pos+=120\r\n        if (idx === 0) {\r\n            this.setState({ editPos: 40 })\r\n        }\r\n        else if (idx === 1) this.setState({ editPos: 120 })\r\n        else if (pos >= 160) this.setState({ editPos: 160 })\r\n        else {\r\n            this.setState({ editPos: pos })\r\n        }\r\n\r\n    }\r\n\r\n    openModal = (currName) => {\r\n        this.setState({\r\n            isModalOpen: true,\r\n            currModal: { ...this.state.currModal, name: currName }\r\n        })\r\n        \r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ isModalOpen: false })\r\n    }\r\n\r\n\r\n    saveCardChanges = async (card, txt) => {\r\n        var { board, loggedUser } = this.props\r\n        if (txt) {\r\n            console.log(card);\r\n            const activity = cardService.getActivityToAdd(card, loggedUser, txt)\r\n            board = { ...board, activities: [activity, ...board.activities] }\r\n        }\r\n        await this.props.updateBoardCard(board, card)\r\n        await this.loadCard()\r\n        \r\n        this.props.exitEditMode()\r\n    }\r\n\r\n    loadCard = () => {\r\n        const { board } = this.props\r\n        const { cardId } = this.props.card.id\r\n        if (cardId && board.groups) {\r\n            const card = cardService.getCardById(board, cardId)\r\n            this.setState({ card })\r\n        } else this.setState({ card: null })\r\n    }\r\n\r\n    handleDefault = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        const { currModal, isModalOpen } = this.state\r\n        const { style, copyList, labels, isEdit, updateBoardCard, card, isLabelOpen, board, handleChange, title, exitEditMode, onArchiveCard, onSave } = this.props\r\n        console.log('board in edit', board);\r\n        return (\r\n            <div onClick={exitEditMode} className={`modal-screen edit`} >\r\n\r\n                <div onClick={this.handleDefault} className=\"edit-container\" style={style}>\r\n\r\n                    <div className={`card-preview flex col ${isEdit ? 'edit' : ''} `}  >\r\n                        <div className=\"label-container\">\r\n                            {labels.map((label, idx) => {\r\n                                return <div onClick={() => this.onOpenLabel(card.id)} key={label.id} className={`label is-close}`} style={{ backgroundColor: label.color }}>\r\n                                </div>\r\n                            })\r\n                            }\r\n                        </div>\r\n                        <div className=\"edit-and-title\">\r\n                            <div>\r\n                                <form onSubmit=\"return false\">\r\n\r\n                                    <textarea disabled={!isEdit} onChange={handleChange}\r\n                                        onClick={(ev) => {\r\n                                            ev.preventDefault()\r\n                                        }}\r\n                                        type=\"text\" value={title} />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-icons\">\r\n                            {card.description && <SubjectIcon />}\r\n                            {card.comments?.length > 0 && <ChatBubbleOutlineRoundedIcon />}\r\n                            {card.attachments?.length > 0 && <AttachFileRoundedIcon style={{ transform: \"rotate(35deg)\" }} />}\r\n                            {card.checklists?.length > 0 && <PlaylistAddCheckSharpIcon />}\r\n                        </div>\r\n\r\n                        <button className=\"save-btn\" onClick={onSave} >Save</button>\r\n\r\n                    </div>\r\n\r\n\r\n                   <div className={'edit-menu'}>\r\n                        <div className=\"edit-menu-btn\"> <PaymentIcon className=\"edit-menu-icons rotate\" /> <Link to={`/board/${board._id}/${card.id}`}>     Open Card  </Link> </div>\r\n                        <div className=\"edit-menu-btn\" onClick={() => this.openModal('labels')} >  <LabelOutlinedIcon className=\"edit-menu-icons\" />  Edit labels </div>\r\n                        <div className=\"edit-menu-btn\" onClick={() => this.openModal('members')} > <PersonOutlineIcon className=\"edit-menu-icons\" /> change members</div>\r\n                        <div className=\"edit-menu-btn\" onClick={() => this.openModal('move')}> <ArrowRightAltIcon className=\"edit-menu-icons\" /> move  </div>\r\n                        <div className=\"edit-menu-btn\" onClick={copyList} > <PaymentIcon className=\"edit-menu-icons rotate\" /> copy </div>\r\n                        <div className=\"edit-menu-btn\" > <AccessTimeIcon className=\"edit-menu-icons\" /> change due date </div>\r\n                        <div className=\"edit-menu-btn\" onClick={onArchiveCard}> <ArchiveOutlinedIcon className=\"edit-menu-icons\" /> archive </div>\r\n                    </div>\r\n\r\n\r\n                {\r\n                    isModalOpen && <div onClick={(ev) => ev.stopPropagation()} className=\"card-edit-modals\" >\r\n                        <DynamicCardActionModal closeModal={this.closeModal} updateBoardCard={updateBoardCard} save={this.saveCardChanges} currModal={currModal} card={card} board={board} />\r\n                    </div>\r\n                }\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\CardDetails.jsx",["481","482","483"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\r\nimport AttachFileRoundedIcon from '@material-ui/icons/AttachFileRounded';\r\nimport PlaylistAddCheckSharpIcon from \"@material-ui/icons/PlaylistAddCheckSharp\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { MyAvatar } from './MyAvatar'\r\n\r\nexport class  CardDetails extends Component {\r\n\r\n    state = {\r\n        isSmall: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.cardRef = React.createRef()\r\n        const { card } = this.props\r\n        if (card.checklists.length === 0 && card.comments.length === 0 && card.description.length === 0 && card.labels.length === 0 && card.attachments.length === 0 && card.members.length === 0) {\r\n            this.setState({ isSmall: true })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { card } = this.props\r\n        if (prevProps !== this.props) {\r\n            if (card.checklists.length > 0 || card.comments.length > 0 || card.description.length > 0 || card.labels.length > 0 || card.attachments.length > 0 || card.members.length > 0) {\r\n                this.setState({ isSmall: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    enterEditMode = (ev, cardId) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const div = this.cardRef.current\r\n        const pos = div.getClientRects()\r\n        console.log(pos);\r\n        var { top, left } = pos[0]\r\n        top -= 5\r\n        left -= 5\r\n        this.props.enterEditMode(cardId, { top, left })\r\n    }\r\n\r\n    render() {\r\n        const { labels, isDragging, isEdit, onOpenLabel, card, isLabelOpen, board, handleChange, title, } = this.props\r\n        const { isSmall, editStyle } = this.state\r\n        const { style } = card\r\n        var cardClass = isDragging ? 'card-preview dragging' : 'card-preview'\r\n        const isIcons = card.description || card.comments?.length > 0 || card.attachments?.length > 0 || card.checklists?.length > 0 || card.members?.length > 0\r\n        var smallCard = isSmall ? 'small' : ''\r\n        var colorBg = (style.background?.backgroundColor) ? 'color-bg' : ''\r\n        return (\r\n            <Link to={`/board/${board._id}/${card.id}`}>\r\n\r\n                <div className={`${cardClass} ${smallCard}`} style={(style.isCover) ? { ...style.background } : {}} >\r\n\r\n\r\n                    {!style.isCover && (style.background?.backgroundImage || style.background?.backgroundColor) &&\r\n                        <div class={`card-cover ${colorBg}`} style={style.background}>\r\n                        </div>\r\n                    }\r\n\r\n                    <div ref={this.cardRef} className=\"details-container\">\r\n\r\n                        <div className=\"label-container\">\r\n                            {labels.map((label, idx) => {\r\n                                return <div onClick={(ev) => onOpenLabel(ev, card.id)} key={label.id} className={`label ${(isLabelOpen) ? \"is-open\" : \"is-close\"}`} style={{ backgroundColor: label.color }}>\r\n                                    {isLabelOpen && label.title}\r\n                                </div>\r\n                            })\r\n                            }\r\n                        </div>\r\n                        <div className={isSmall ? 'small-card' : `edit-and-title`} >\r\n                            <p style={(style.isCover && (style.background.backgroundImage || style.background.backgroundColor)) ? { color: 'white', fontWeight: '700' } : {}}>{title}</p>\r\n                            <span className={`edit-icon ${labels.length ? 'with-label' : ''}`} onClick={(ev) => this.enterEditMode(ev, card.id, editStyle)} >\r\n                                <EditIcon />\r\n                            </span>\r\n                        </div>\r\n                        {isIcons && <div className=\"card-icons flex align-center\">\r\n\r\n                            <div className=\"card-icons-section1 flex align-center\">\r\n\r\n                                {card.description && <SubjectIcon />}\r\n                                {card.comments?.length > 0 && <ChatBubbleOutlineRoundedIcon />}\r\n                                {card.attachments?.length > 0 && <AttachFileRoundedIcon style={{ transform: \"rotate(35deg)\" }} />}\r\n                                {card.checklists?.length > 0 && <PlaylistAddCheckSharpIcon />}\r\n\r\n                            </div>\r\n\r\n                            {card.members?.length > 0 && <div className='members-container'>  {card.members.map(member => <MyAvatar user={member} />)} </div>}\r\n\r\n                            {/* {(card.members.length>=2)?`card-avatars-container`: 'card-avatars-container-single'} */}\r\n\r\n                        </div>}\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n            </Link >\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\MoveCardModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\CopyCardModal.jsx",[],"C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddAttachmentModal.jsx",["484","485"],"import React, { Component } from \"react\";\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport { utilService } from \"../../services/utilService\";\r\n\r\n\r\nexport class AddAttachmentModal extends Component {\r\n    state = {\r\n        url: '',\r\n        title: ''\r\n    }\r\n\r\n    onAddAttachment = (ev) => {\r\n        console.log(ev);\r\n        if (!ev.key || ev.key && ev.key === \"Enter\") {\r\n\r\n            const { title, url } = this.state\r\n            const newAttachment = {\r\n                id: utilService.makeId(),\r\n                title: title,\r\n                url: url\r\n            }\r\n            const card = { ...this.props.card, attachments: [...this.props.card.attachments, newAttachment] }\r\n            this.props.save(card, `added attachment to ${newAttachment.title} to card`)\r\n            this.props.closeModal()\r\n        }\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const { name, value } = ev.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { closeModal, style } = this.props\r\n        return (\r\n            <div fer className=\"attachments-modal card-action-modal\" style={style}>\r\n                <div className=\"flex justify-center\">\r\n                    Attach From...\r\n                </div>\r\n                <button className=\"icon\" onClick={closeModal}><CloseSharpIcon /></button>\r\n                <hr />\r\n                <small>Attach a link</small>\r\n                <input autoFocus onChange={this.handleInput} onKeyUp={this.onAddAttachment} autoComplete=\"off\" placeholder=\"Paste any link here...\" type=\"text\" name=\"url\" />\r\n                {this.state.url && <small>Link name (optional)</small>}\r\n                {this.state.url && <input ref=\"linkNameRef\" autoComplete=\"off\" onKeyUp={this.onAddAttachment} onChange={this.handleInput} type=\"text\" name=\"title\" />}\r\n                <button onClick={this.onAddAttachment}>Attach</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddCoverModal.jsx",["486"],"import { Component } from \"react\";\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport img1 from '../../assets/bgImgs/image-01.jpg'\r\nimport img2 from '../../assets/bgImgs/image-02.jpg'\r\nimport img3 from '../../assets/bgImgs/image-03.jpg'\r\nimport img4 from '../../assets/bgImgs/image-04.jpg'\r\nimport img5 from '../../assets/bgImgs/image-05.jpg'\r\nimport img6 from '../../assets/bgImgs/image-06.jpg'\r\nimport img7 from '../../assets/bgImgs/image-07.jpg'\r\nimport img8 from '../../assets/bgImgs/image-08.jpg'\r\nimport img9 from '../../assets/bgImgs/image-09.jpg'\r\nimport img10 from '../../assets/bgImgs/image-10.jpg'\r\nimport img11 from '../../assets/bgImgs/image-11.jpg'\r\nimport img12 from '../../assets/bgImgs/image-12.jpg'\r\nimport img13 from '../../assets/bgImgs/image-15.jpg'\r\nimport img14 from '../../assets/bgImgs/image-16.jpg'\r\nimport img15 from '../../assets/bgImgs/image-17.jpg'\r\nimport img16 from '../../assets/bgImgs/image-18.jpg'\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\n\r\n\r\nexport class AddCoverModal extends Component {\r\n\r\n    state = {\r\n        filter: '',\r\n        isCover: false\r\n    }\r\n\r\n    setColor = (color) => {\r\n        const card = JSON.parse(JSON.stringify(this.props.card))\r\n        const {isCover} = this.state\r\n        const NewCard = {\r\n            ...card, style: {\r\n                isCover,\r\n                background: {\r\n                    backgroundColor: color,\r\n                }\r\n            }\r\n        }\r\n        this.props.save(NewCard, `Set background color`)\r\n        this.props.closeModal()\r\n    }\r\n\r\n    setImg = (url) => {\r\n        const card = JSON.parse(JSON.stringify(this.props.card))\r\n        const {isCover} = this.state\r\n        const NewCard = {\r\n            ...card, style: {\r\n                isCover,\r\n                background: {\r\n                    backgroundImage: `url(${url})`,\r\n                }\r\n            }\r\n        }\r\n        this.props.save(NewCard, `Set background Img`)\r\n        this.props.closeModal()\r\n    }\r\n    clearStyle = () => {\r\n        const card = JSON.parse(JSON.stringify(this.props.card))\r\n        const NewCard = { ...card, style: {} }\r\n        this.props.save(NewCard, `Removed background`)\r\n        this.props.closeModal()\r\n    }\r\n\r\n    render() {\r\n        const colors = ['lightgray', '#adad85', 'coral', '#ff4d4d', 'crimson', 'yellowgreen', 'teal', '#3385ff',]\r\n        const imgs = [img1, img2, img3, img4, img5, img6, img7, img8, img9, img10, img11, img12, img13, img14, img15, img16]\r\n        const { closeModal, style } = this.props\r\n        const {isCover} = this.state\r\n        return (\r\n            <div className=\"cover-modal card-action-modal\" style={style}>\r\n                <div className=\"flex justify-center\">\r\n                    Cover\r\n                </div>\r\n                <button className=\"icon\" onClick={closeModal}><CloseSharpIcon /></button>\r\n                <hr />\r\n                <small>SIZE</small>\r\n                <div className=\"cover-style-btns flex \">\r\n                    <button className={isCover ? '' : 'selected'} onClick={() => this.setState({ isCover: false })}><CreditCardIcon /></button>\r\n                    <button className={!isCover ? 'upside' : 'upside selected'} onClick={() => this.setState({ isCover: true })}><CreditCardIcon /></button>\r\n                </div>\r\n                <small>COLORS</small>\r\n                <div className=\"flex wrap space-bt\">\r\n                    {colors.map(color => <div onClick={() => this.setColor(color)} key={Math.random()} className=\"color-box\" style={{ backgroundColor: color }}></div>)}\r\n                </div>\r\n                <small>UNSPLASH</small>\r\n                <div className=\"flex wrap space-bt\">\r\n                    {imgs.map(src => <img onClick={() => this.setImg(src)} key={Math.random()} className=\"color-box\" src={src} />)}\r\n                </div>\r\n                <button onClick={this.clearStyle}>Clear</button>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\AddChecklistModal.jsx",["487"],"import { Component } from \"react\";\r\nimport CloseSharpIcon from '@material-ui/icons/CloseSharp';\r\nimport { utilService } from \"../../services/utilService\";\r\n\r\n\r\nexport class AddChecklistModal extends Component{\r\n    state = {\r\n        title: 'Checklist'\r\n    }\r\n\r\n    onAddChecklist = (ev) => {\r\n        if (ev.key && ev.key !== \"Enter\") return \r\n        const { card, save, closeModal } = this.props\r\n        const newChecklist = {\r\n            id: utilService.makeId(),\r\n            title: this.state.title,\r\n            createdAt: Date.now(),\r\n            createdBy: {\r\n                _id: \"u101\",\r\n                fullname: \"Tal Tarablus\",\r\n                imgUrl: \"http://res.cloudinary.com/shaishar9/image/upload/v1590850482/j1glw3c9jsoz2py0miol.jpg\"\r\n            },\r\n            todos: []\r\n        }\r\n        const newCard = {...card, checklists:[...card.checklists, newChecklist]}\r\n        save(newCard, `added checklist ${newChecklist.title} to card`)\r\n        closeModal()\r\n    }\r\n\r\n    handleFocus = (ev) => {\r\n        ev.target.select()\r\n    }\r\n\r\n    render() {\r\n\r\n        const { card, closeModal, style } = this.props\r\n        return (\r\n            <div className=\"checklist-modal card-action-modal\" style={style}>\r\n                <div className=\"flex justify-center\">\r\n                    Add Checklist\r\n                </div>\r\n                <button className=\"icon\" onClick={closeModal}><CloseSharpIcon /></button>\r\n                <hr />\r\n                <small>Title</small>\r\n                <input \r\n                autoComplete=\"off\" \r\n                onFocus={this.handleFocus} \r\n                autoFocus \r\n                type=\"text\" name=\"title\" \r\n                onChange={({ target }) => this.setState({ title: target.value })} value={this.state.title}\r\n                onKeyDown={this.onAddChecklist}\r\n                />\r\n                <button onClick={this.onAddChecklist}>Add</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","C:\\Users\\97250\\Desktop\\Sprint4 trello\\frontend\\src\\cmps\\card\\LabelListModal.jsx",[],{"ruleId":"488","replacedBy":"489"},{"ruleId":"490","replacedBy":"491"},{"ruleId":"492","severity":1,"message":"493","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":21},{"ruleId":"492","severity":1,"message":"496","line":270,"column":13,"nodeType":"494","messageId":"495","endLine":270,"endColumn":18},{"ruleId":"492","severity":1,"message":"497","line":7,"column":10,"nodeType":"494","messageId":"495","endLine":7,"endColumn":20},{"ruleId":"492","severity":1,"message":"498","line":9,"column":10,"nodeType":"494","messageId":"495","endLine":9,"endColumn":14},{"ruleId":"492","severity":1,"message":"499","line":15,"column":8,"nodeType":"494","messageId":"495","endLine":15,"endColumn":12},{"ruleId":"492","severity":1,"message":"500","line":16,"column":8,"nodeType":"494","messageId":"495","endLine":16,"endColumn":12},{"ruleId":"492","severity":1,"message":"501","line":17,"column":8,"nodeType":"494","messageId":"495","endLine":17,"endColumn":12},{"ruleId":"492","severity":1,"message":"502","line":18,"column":8,"nodeType":"494","messageId":"495","endLine":18,"endColumn":12},{"ruleId":"503","severity":1,"message":"504","line":92,"column":9,"nodeType":"505","messageId":"506","endLine":92,"endColumn":32},{"ruleId":"492","severity":1,"message":"507","line":2,"column":16,"nodeType":"494","messageId":"495","endLine":2,"endColumn":23},{"ruleId":"492","severity":1,"message":"508","line":15,"column":10,"nodeType":"494","messageId":"495","endLine":15,"endColumn":21},{"ruleId":"509","severity":1,"message":"510","line":160,"column":17,"nodeType":"494","messageId":"511","endLine":160,"endColumn":23},{"ruleId":"509","severity":1,"message":"510","line":165,"column":13,"nodeType":"494","messageId":"511","endLine":165,"endColumn":19},{"ruleId":"492","severity":1,"message":"512","line":238,"column":12,"nodeType":"494","messageId":"495","endLine":238,"endColumn":21},{"ruleId":"492","severity":1,"message":"513","line":80,"column":17,"nodeType":"494","messageId":"495","endLine":80,"endColumn":27},{"ruleId":"492","severity":1,"message":"514","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":18},{"ruleId":"492","severity":1,"message":"515","line":3,"column":8,"nodeType":"494","messageId":"495","endLine":3,"endColumn":17},{"ruleId":"492","severity":1,"message":"516","line":6,"column":8,"nodeType":"494","messageId":"495","endLine":6,"endColumn":25},{"ruleId":"492","severity":1,"message":"517","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":18},{"ruleId":"518","severity":1,"message":"519","line":109,"column":81,"nodeType":"520","endLine":109,"endColumn":96},{"ruleId":"521","severity":1,"message":"522","line":18,"column":64,"nodeType":"523","messageId":"524","endLine":18,"endColumn":65},{"ruleId":"492","severity":1,"message":"498","line":1,"column":10,"nodeType":"494","messageId":"495","endLine":1,"endColumn":14},{"ruleId":"492","severity":1,"message":"525","line":1,"column":10,"nodeType":"494","messageId":"495","endLine":1,"endColumn":19},{"ruleId":"492","severity":1,"message":"526","line":18,"column":8,"nodeType":"494","messageId":"495","endLine":18,"endColumn":21},{"ruleId":"492","severity":1,"message":"527","line":1,"column":8,"nodeType":"494","messageId":"495","endLine":1,"endColumn":15},{"ruleId":"492","severity":1,"message":"528","line":6,"column":8,"nodeType":"494","messageId":"495","endLine":6,"endColumn":16},{"ruleId":"492","severity":1,"message":"529","line":67,"column":19,"nodeType":"494","messageId":"495","endLine":67,"endColumn":25},{"ruleId":"492","severity":1,"message":"530","line":12,"column":9,"nodeType":"494","messageId":"495","endLine":12,"endColumn":24},{"ruleId":"492","severity":1,"message":"531","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":19},{"ruleId":"492","severity":1,"message":"532","line":6,"column":8,"nodeType":"494","messageId":"495","endLine":6,"endColumn":16},{"ruleId":"492","severity":1,"message":"533","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":25},{"ruleId":"492","severity":1,"message":"534","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":32},{"ruleId":"535","severity":1,"message":"536","line":50,"column":29,"nodeType":"537","endLine":50,"endColumn":54},{"ruleId":"492","severity":1,"message":"538","line":9,"column":8,"nodeType":"494","messageId":"495","endLine":9,"endColumn":24},{"ruleId":"535","severity":1,"message":"536","line":37,"column":29,"nodeType":"537","endLine":37,"endColumn":75},{"ruleId":"535","severity":1,"message":"536","line":43,"column":29,"nodeType":"537","endLine":43,"endColumn":75},{"ruleId":"539","severity":1,"message":"540","line":61,"column":20,"nodeType":"537","endLine":61,"endColumn":24},{"ruleId":"492","severity":1,"message":"541","line":6,"column":10,"nodeType":"494","messageId":"495","endLine":6,"endColumn":25},{"ruleId":"492","severity":1,"message":"542","line":6,"column":27,"nodeType":"494","messageId":"495","endLine":6,"endColumn":36},{"ruleId":"492","severity":1,"message":"543","line":10,"column":10,"nodeType":"494","messageId":"495","endLine":10,"endColumn":32},{"ruleId":"492","severity":1,"message":"544","line":12,"column":10,"nodeType":"494","messageId":"495","endLine":12,"endColumn":19},{"ruleId":"492","severity":1,"message":"545","line":13,"column":8,"nodeType":"494","messageId":"495","endLine":13,"endColumn":11},{"ruleId":"492","severity":1,"message":"496","line":13,"column":34,"nodeType":"494","messageId":"495","endLine":13,"endColumn":39},{"ruleId":"492","severity":1,"message":"546","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":21},{"ruleId":"535","severity":1,"message":"536","line":105,"column":29,"nodeType":"537","endLine":105,"endColumn":50},{"ruleId":"492","severity":1,"message":"525","line":1,"column":17,"nodeType":"494","messageId":"495","endLine":1,"endColumn":26},{"ruleId":"492","severity":1,"message":"547","line":3,"column":10,"nodeType":"494","messageId":"495","endLine":3,"endColumn":25},{"ruleId":"492","severity":1,"message":"525","line":1,"column":17,"nodeType":"494","messageId":"495","endLine":1,"endColumn":26},{"ruleId":"492","severity":1,"message":"548","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":17},{"ruleId":"492","severity":1,"message":"549","line":4,"column":10,"nodeType":"494","messageId":"495","endLine":4,"endColumn":24},{"ruleId":"492","severity":1,"message":"550","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":21},{"ruleId":"492","severity":1,"message":"551","line":8,"column":85,"nodeType":"494","messageId":"495","endLine":8,"endColumn":98},{"ruleId":"492","severity":1,"message":"552","line":2,"column":9,"nodeType":"494","messageId":"495","endLine":2,"endColumn":26},{"ruleId":"492","severity":1,"message":"553","line":26,"column":16,"nodeType":"494","messageId":"495","endLine":26,"endColumn":25},{"ruleId":"492","severity":1,"message":"554","line":5,"column":10,"nodeType":"494","messageId":"495","endLine":5,"endColumn":22},{"ruleId":"555","severity":1,"message":"556","line":34,"column":17,"nodeType":"537","endLine":34,"endColumn":81},{"ruleId":"492","severity":1,"message":"557","line":4,"column":8,"nodeType":"494","messageId":"495","endLine":4,"endColumn":22},{"ruleId":"492","severity":1,"message":"541","line":6,"column":10,"nodeType":"494","messageId":"495","endLine":6,"endColumn":25},{"ruleId":"492","severity":1,"message":"558","line":6,"column":38,"nodeType":"494","messageId":"495","endLine":6,"endColumn":47},{"ruleId":"559","severity":1,"message":"560","line":45,"column":48,"nodeType":"561","messageId":"562","endLine":45,"endColumn":50},{"ruleId":"492","severity":1,"message":"563","line":1,"column":10,"nodeType":"494","messageId":"495","endLine":1,"endColumn":19},{"ruleId":"492","severity":1,"message":"548","line":3,"column":10,"nodeType":"494","messageId":"495","endLine":3,"endColumn":17},{"ruleId":"492","severity":1,"message":"541","line":5,"column":10,"nodeType":"494","messageId":"495","endLine":5,"endColumn":25},{"ruleId":"492","severity":1,"message":"542","line":5,"column":27,"nodeType":"494","messageId":"495","endLine":5,"endColumn":36},{"ruleId":"492","severity":1,"message":"564","line":26,"column":30,"nodeType":"494","messageId":"495","endLine":26,"endColumn":41},{"ruleId":"488","replacedBy":"565"},{"ruleId":"490","replacedBy":"566"},{"ruleId":"492","severity":1,"message":"532","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":16},{"ruleId":"492","severity":1,"message":"567","line":14,"column":10,"nodeType":"494","messageId":"495","endLine":14,"endColumn":17},{"ruleId":"492","severity":1,"message":"568","line":41,"column":15,"nodeType":"494","messageId":"495","endLine":41,"endColumn":23},{"ruleId":"492","severity":1,"message":"569","line":109,"column":73,"nodeType":"494","messageId":"495","endLine":109,"endColumn":84},{"ruleId":"492","severity":1,"message":"533","line":8,"column":8,"nodeType":"494","messageId":"495","endLine":8,"endColumn":25},{"ruleId":"492","severity":1,"message":"570","line":48,"column":37,"nodeType":"494","messageId":"495","endLine":48,"endColumn":43},{"ruleId":"492","severity":1,"message":"571","line":48,"column":84,"nodeType":"494","messageId":"495","endLine":48,"endColumn":96},{"ruleId":"572","severity":1,"message":"573","line":14,"column":21,"nodeType":"574","messageId":"575","endLine":14,"endColumn":23},{"ruleId":"572","severity":1,"message":"573","line":14,"column":31,"nodeType":"574","messageId":"575","endLine":14,"endColumn":33},{"ruleId":"535","severity":1,"message":"536","line":88,"column":38,"nodeType":"537","endLine":88,"endColumn":130},{"ruleId":"492","severity":1,"message":"576","line":36,"column":17,"nodeType":"494","messageId":"495","endLine":36,"endColumn":21},"no-native-reassign",["577"],"no-negated-in-lhs",["578"],"no-unused-vars","'cardService' is defined but never used.","Identifier","unusedVar","'board' is assigned a value but never used.","'BoardsPick' is defined but never used.","'Link' is defined but never used.","'img2' is defined but never used.","'img3' is defined but never used.","'img4' is defined but never used.","'img5' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'NavLink' is defined but never used.","'MenuMapShow' is defined but never used.","no-redeclare","'labels' is already defined.","redeclared","'allBoards' is assigned a value but never used.","'loggedUser' is assigned a value but never used.","'addBoard' is defined but never used.","'Templates' is defined but never used.","'DeleteOutlineIcon' is defined but never used.","'homeImgSrc' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Component' is defined but never used.","'MoreHorizIcon' is defined but never used.","'loading' is defined but never used.","'RoomIcon' is defined but never used.","'cardId' is assigned a value but never used.","'AddDueDateModal' is defined but never used.","'AvatarGroup' is defined but never used.","'EditIcon' is defined but never used.","'AccountCircleIcon' is defined but never used.","'RemoveRedEyeOutlinedIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ArrowBackIosIcon' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'DynamicCardActionModal' is defined but never used.","'Transform' is defined but never used.","'img' is defined but never used.","'menuService' is defined but never used.","'MemberListModal' is defined but never used.","'connect' is defined but never used.","'handleTodoDrag' is defined but never used.","'utilService' is defined but never used.","'isAddingToTop' is assigned a value but never used.","'DynamicGroupModal' is defined but never used.","'currModal' is assigned a value but never used.","'CallReceived' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CloseSharpIcon' is defined but never used.","'Draggable' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TableCell' is defined but never used.","'isModalOpen' is assigned a value but never used.",["577"],["578"],"'Archive' is defined but never used.","'finalPos' is assigned a value but never used.","'isLabelOpen' is assigned a value but never used.","'isEdit' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'card' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]